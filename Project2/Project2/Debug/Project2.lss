
Project2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00001592  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000005b  00000000  00000000  00001592  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000138  00000000  00000000  000015ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001d9c  00000000  00000000  00001725  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000009a3  00000000  00000000  000034c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000c16  00000000  00000000  00003e64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000388  00000000  00000000  00004a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ca  00000000  00000000  00004e04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000e9e  00000000  00000000  00004fce  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000108  00000000  00000000  00005e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000151a  0000151a  0000158e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00005f74  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.avr_init 00000006  00001514  00001514  00001588  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.avr_wait 00000028  0000142e  0000142e  000014a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.input   00000034  0000130e  0000130e  00001382  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.output  00000032  00001342  00001342  000013b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.write   00000020  000014a6  000014a6  0000151a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.lcd_init 0000005c  0000101e  0000101e  00001092  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.lcd_clr 0000000a  0000150a  0000150a  0000157e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_pos 00000030  000013a6  000013a6  0000141a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.lcd_puts2 00000036  0000126c  0000126c  000012e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.is_pressed 00000068  00000f58  00000f58  00000fcc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.get_key 00000050  000010ce  000010ce  00001142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.is_number 0000002c  000013d6  000013d6  0000144a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.convert 00000054  0000107a  0000107a  000010ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.init_dt 0000002c  00001402  00001402  00001476  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.recalc_time 00000040  000011b4  000011b4  00001228  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .progmemx.data 0000008f  000000a0  000000a0  00000114  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 29 .text.set_time 00000244  000007c2  000007c2  00000836  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.set_ampm 0000007a  00000e66  00000e66  00000eda  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.month_days 00000050  0000111e  0000111e  00001192  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.advance_dt 000000ce  00000b7c  00000b7c  00000bf0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.set_date 0000024a  00000578  00000578  000005ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.print_dt 000000a6  00000dc0  00000dc0  00000e34  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.calc_mili_time 0000005e  00000fc0  00000fc0  00001034  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.print_time 00000176  00000a06  00000a06  00000a7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.switch_time 00000014  000014c6  000014c6  0000153a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.switch_ampm 00000014  000014da  000014da  0000154e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.test_newyears 00000040  000011f4  000011f4  00001268  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.main    000000ba  00000d06  00000d06  00000d7a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.libgcc.div 00000028  00001456  00001456  000014ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.libgcc  0000000c  000014fe  000014fe  00001572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.libgcc  00000010  000014ee  000014ee  00001562  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.libgcc.div 00000028  0000147e  0000147e  000014f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.avrlibc 00000032  00001374  00001374  000013e8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.avrlibc 00000046  0000116e  0000116e  000011e2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.avrlibc 00000448  00000130  00000130  000001a4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.avrlibc 00000036  000012a2  000012a2  00001316  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.avrlibc 00000078  00000ee0  00000ee0  00000f54  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.avrlibc 000000bc  00000c4a  00000c4a  00000cbe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .text.libgcc.prologue 00000038  00001234  00001234  000012a8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 52 .text.libgcc.prologue 00000036  000012d8  000012d8  0000134c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 44 00 	jmp	0x88	; 0x88 <__ctors_end>
   4:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
   8:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
   c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  10:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  14:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  18:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  1c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  20:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  24:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  28:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  2c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  30:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  34:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  38:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  3c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  40:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  44:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  48:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  4c:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  50:	0c 94 8d 0a 	jmp	0x151a	; 0x151a <__bad_interrupt>
  54:	58 08       	sbc	r5, r8
  56:	5b 08       	sbc	r5, r11
  58:	5e 08       	sbc	r5, r14
  5a:	61 08       	sbc	r6, r1
  5c:	4f 08       	sbc	r4, r15
  5e:	52 08       	sbc	r5, r2
  60:	55 08       	sbc	r5, r5
  62:	61 08       	sbc	r6, r1
  64:	64 08       	sbc	r6, r4
  66:	49 08       	sbc	r4, r9
  68:	4c 08       	sbc	r4, r12
  6a:	61 08       	sbc	r6, r1
  6c:	61 08       	sbc	r6, r1
  6e:	46 08       	sbc	r4, r6
  70:	a2 08       	sbc	r10, r2
  72:	a5 08       	sbc	r10, r5
  74:	a2 08       	sbc	r10, r2
  76:	b1 08       	sbc	r11, r1
  78:	a2 08       	sbc	r10, r2
  7a:	b1 08       	sbc	r11, r1
  7c:	a2 08       	sbc	r10, r2
  7e:	a2 08       	sbc	r10, r2
  80:	b1 08       	sbc	r11, r1
  82:	a2 08       	sbc	r10, r2
  84:	b1 08       	sbc	r11, r1
  86:	a2 08       	sbc	r10, r2

00000088 <__ctors_end>:
  88:	11 24       	eor	r1, r1
  8a:	1f be       	out	0x3f, r1	; 63
  8c:	cf e5       	ldi	r28, 0x5F	; 95
  8e:	d8 e0       	ldi	r29, 0x08	; 8
  90:	de bf       	out	0x3e, r29	; 62
  92:	cd bf       	out	0x3d, r28	; 61
  94:	0e 94 83 06 	call	0xd06	; 0xd06 <main>
  98:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>

Disassembly of section .text:

0000151a <__bad_interrupt>:
    151a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.avr_init:

00001514 <avr_init>:
#include "avr.h"

void
avr_init(void)
{
	WDTCR = 15;
    1514:	8f e0       	ldi	r24, 0x0F	; 15
    1516:	81 bd       	out	0x21, r24	; 33
    1518:	08 95       	ret

Disassembly of section .text.avr_wait:

0000142e <avr_wait>:
}

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
    142e:	23 e0       	ldi	r18, 0x03	; 3
    1430:	23 bf       	out	0x33, r18	; 51
	while (msec--) {
    1432:	0a c0       	rjmp	.+20     	; 0x1448 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
    1434:	83 e8       	ldi	r24, 0x83	; 131
    1436:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
    1438:	88 b7       	in	r24, 0x38	; 56
    143a:	81 60       	ori	r24, 0x01	; 1
    143c:	88 bf       	out	0x38, r24	; 56
		WDR();
    143e:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
    1440:	08 b6       	in	r0, 0x38	; 56
    1442:	00 fe       	sbrs	r0, 0
    1444:	fd cf       	rjmp	.-6      	; 0x1440 <avr_wait+0x12>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
    1446:	c9 01       	movw	r24, r18
    1448:	9c 01       	movw	r18, r24
    144a:	21 50       	subi	r18, 0x01	; 1
    144c:	31 09       	sbc	r19, r1
    144e:	89 2b       	or	r24, r25
    1450:	89 f7       	brne	.-30     	; 0x1434 <avr_wait+0x6>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
    1452:	13 be       	out	0x33, r1	; 51
    1454:	08 95       	ret

Disassembly of section .text.input:

0000130e <input>:

static unsigned char
input(unsigned char rs)
{
	unsigned char d;
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
    130e:	88 23       	and	r24, r24
    1310:	21 f0       	breq	.+8      	; 0x131a <input+0xc>
    1312:	88 b3       	in	r24, 0x18	; 24
    1314:	81 60       	ori	r24, 0x01	; 1
    1316:	88 bb       	out	0x18, r24	; 24
    1318:	03 c0       	rjmp	.+6      	; 0x1320 <input+0x12>
    131a:	88 b3       	in	r24, 0x18	; 24
    131c:	8e 7f       	andi	r24, 0xFE	; 254
    131e:	88 bb       	out	0x18, r24	; 24
	SET_BIT(PORT, RW_PIN);
    1320:	88 b3       	in	r24, 0x18	; 24
    1322:	82 60       	ori	r24, 0x02	; 2
    1324:	88 bb       	out	0x18, r24	; 24
}

static inline unsigned char
get_data(void)
{
	DDRD = 0x00;
    1326:	11 ba       	out	0x11, r1	; 17
	return PIND;
    1328:	80 b3       	in	r24, 0x10	; 16
{
	unsigned char d;
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	SET_BIT(PORT, RW_PIN);
	get_data();
	SET_BIT(PORT, EN_PIN);
    132a:	88 b3       	in	r24, 0x18	; 24
    132c:	84 60       	ori	r24, 0x04	; 4
    132e:	88 bb       	out	0x18, r24	; 24
}

static inline void
sleep_700ns(void)
{
	NOP();
    1330:	00 00       	nop
	NOP();
    1332:	00 00       	nop
	NOP();
    1334:	00 00       	nop
}

static inline unsigned char
get_data(void)
{
	DDRD = 0x00;
    1336:	11 ba       	out	0x11, r1	; 17
	return PIND;
    1338:	80 b3       	in	r24, 0x10	; 16
	SET_BIT(PORT, RW_PIN);
	get_data();
	SET_BIT(PORT, EN_PIN);
	sleep_700ns();
	d = get_data();
	CLR_BIT(PORT, EN_PIN);
    133a:	98 b3       	in	r25, 0x18	; 24
    133c:	9b 7f       	andi	r25, 0xFB	; 251
    133e:	98 bb       	out	0x18, r25	; 24
	return d;
}
    1340:	08 95       	ret

Disassembly of section .text.output:

00001342 <output>:

static void
output(unsigned char d, unsigned char rs)
{
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
    1342:	66 23       	and	r22, r22
    1344:	21 f0       	breq	.+8      	; 0x134e <output+0xc>
    1346:	98 b3       	in	r25, 0x18	; 24
    1348:	91 60       	ori	r25, 0x01	; 1
    134a:	98 bb       	out	0x18, r25	; 24
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <output+0x12>
    134e:	98 b3       	in	r25, 0x18	; 24
    1350:	9e 7f       	andi	r25, 0xFE	; 254
    1352:	98 bb       	out	0x18, r25	; 24
	CLR_BIT(PORT, RW_PIN);
    1354:	98 b3       	in	r25, 0x18	; 24
    1356:	9d 7f       	andi	r25, 0xFD	; 253
    1358:	98 bb       	out	0x18, r25	; 24
#define EN_PIN 2

static inline void
set_data(unsigned char x)
{
	PORTD = x;
    135a:	82 bb       	out	0x12, r24	; 18
	DDRD = 0xff;
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	81 bb       	out	0x11, r24	; 17
output(unsigned char d, unsigned char rs)
{
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	CLR_BIT(PORT, RW_PIN);
	set_data(d);
	SET_BIT(PORT, EN_PIN);
    1360:	88 b3       	in	r24, 0x18	; 24
    1362:	84 60       	ori	r24, 0x04	; 4
    1364:	88 bb       	out	0x18, r24	; 24
}

static inline void
sleep_700ns(void)
{
	NOP();
    1366:	00 00       	nop
	NOP();
    1368:	00 00       	nop
	NOP();
    136a:	00 00       	nop
	if (rs) SET_BIT(PORT, RS_PIN); else CLR_BIT(PORT, RS_PIN);
	CLR_BIT(PORT, RW_PIN);
	set_data(d);
	SET_BIT(PORT, EN_PIN);
	sleep_700ns();
	CLR_BIT(PORT, EN_PIN);
    136c:	88 b3       	in	r24, 0x18	; 24
    136e:	8b 7f       	andi	r24, 0xFB	; 251
    1370:	88 bb       	out	0x18, r24	; 24
    1372:	08 95       	ret

Disassembly of section .text.write:

000014a6 <write>:
}

static void
write(unsigned char c, unsigned char rs)
{
    14a6:	cf 93       	push	r28
    14a8:	df 93       	push	r29
    14aa:	c8 2f       	mov	r28, r24
    14ac:	d6 2f       	mov	r29, r22
	while (input(0) & 0x80);
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	0e 94 87 09 	call	0x130e	; 0x130e <input>
    14b4:	88 23       	and	r24, r24
    14b6:	dc f3       	brlt	.-10     	; 0x14ae <write+0x8>
	output(c, rs);
    14b8:	6d 2f       	mov	r22, r29
    14ba:	8c 2f       	mov	r24, r28
    14bc:	0e 94 a1 09 	call	0x1342	; 0x1342 <output>
}
    14c0:	df 91       	pop	r29
    14c2:	cf 91       	pop	r28
    14c4:	08 95       	ret

Disassembly of section .text.lcd_init:

0000101e <lcd_init>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
    101e:	87 b3       	in	r24, 0x17	; 23
    1020:	81 60       	ori	r24, 0x01	; 1
    1022:	87 bb       	out	0x17, r24	; 23
    1024:	87 b3       	in	r24, 0x17	; 23
    1026:	82 60       	ori	r24, 0x02	; 2
    1028:	87 bb       	out	0x17, r24	; 23
    102a:	87 b3       	in	r24, 0x17	; 23
    102c:	84 60       	ori	r24, 0x04	; 4
    102e:	87 bb       	out	0x17, r24	; 23
    1030:	80 e1       	ldi	r24, 0x10	; 16
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
    1038:	60 e0       	ldi	r22, 0x00	; 0
    103a:	80 e3       	ldi	r24, 0x30	; 48
    103c:	0e 94 a1 09 	call	0x1342	; 0x1342 <output>
    1040:	85 e0       	ldi	r24, 0x05	; 5
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
    1048:	60 e0       	ldi	r22, 0x00	; 0
    104a:	80 e3       	ldi	r24, 0x30	; 48
    104c:	0e 94 a1 09 	call	0x1342	; 0x1342 <output>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
    1058:	60 e0       	ldi	r22, 0x00	; 0
    105a:	8c e3       	ldi	r24, 0x3C	; 60
    105c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
    1060:	60 e0       	ldi	r22, 0x00	; 0
    1062:	8c e0       	ldi	r24, 0x0C	; 12
    1064:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
    1068:	60 e0       	ldi	r22, 0x00	; 0
    106a:	86 e0       	ldi	r24, 0x06	; 6
    106c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
    1070:	60 e0       	ldi	r22, 0x00	; 0
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
    1078:	08 95       	ret

Disassembly of section .text.lcd_clr:

0000150a <lcd_clr>:
}

void
lcd_clr(void)
{
	write(0x01, 0);
    150a:	60 e0       	ldi	r22, 0x00	; 0
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
    1512:	08 95       	ret

Disassembly of section .text.lcd_pos:

000013a6 <lcd_pos>:
}

void
lcd_pos(unsigned char r, unsigned char c)
{
    13a6:	cf 93       	push	r28
    13a8:	df 93       	push	r29
	unsigned char n = r * 40 + c;
    13aa:	c6 2f       	mov	r28, r22
    13ac:	98 e2       	ldi	r25, 0x28	; 40
    13ae:	89 9f       	mul	r24, r25
    13b0:	c0 0d       	add	r28, r0
    13b2:	11 24       	eor	r1, r1
	write(0x02, 0);
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	82 e0       	ldi	r24, 0x02	; 2
    13b8:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
	while (n--) {
    13bc:	05 c0       	rjmp	.+10     	; 0x13c8 <lcd_pos+0x22>
		write(0x14, 0);
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	84 e1       	ldi	r24, 0x14	; 20
    13c2:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>
void
lcd_pos(unsigned char r, unsigned char c)
{
	unsigned char n = r * 40 + c;
	write(0x02, 0);
	while (n--) {
    13c6:	cd 2f       	mov	r28, r29
    13c8:	df ef       	ldi	r29, 0xFF	; 255
    13ca:	dc 0f       	add	r29, r28
    13cc:	c1 11       	cpse	r28, r1
    13ce:	f7 cf       	rjmp	.-18     	; 0x13be <lcd_pos+0x18>
		write(0x14, 0);
	}
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

Disassembly of section .text.lcd_puts2:

0000126c <lcd_puts2>:
	}
}

void
lcd_puts2(const char *s)
{
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	a8 2f       	mov	r26, r24
    1274:	cb 01       	movw	r24, r22
	char c;
	while ((c = *(s++)) != 0) {
    1276:	05 c0       	rjmp	.+10     	; 0x1282 <lcd_puts2+0x16>
		write(c, 1);
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
    127e:	ae 2d       	mov	r26, r14
    1280:	c6 01       	movw	r24, r12
    1282:	6c 01       	movw	r12, r24
    1284:	ea 2e       	mov	r14, r26
    1286:	2f ef       	ldi	r18, 0xFF	; 255
    1288:	c2 1a       	sub	r12, r18
    128a:	d2 0a       	sbc	r13, r18
    128c:	e2 0a       	sbc	r14, r18
    128e:	fc 01       	movw	r30, r24
    1290:	84 91       	lpm	r24, Z
    1292:	a7 fd       	sbrc	r26, 7
    1294:	80 81       	ld	r24, Z
    1296:	81 11       	cpse	r24, r1
    1298:	ef cf       	rjmp	.-34     	; 0x1278 <lcd_puts2+0xc>
		write(c, 1);
	}
    129a:	ef 90       	pop	r14
    129c:	df 90       	pop	r13
    129e:	cf 90       	pop	r12
    12a0:	08 95       	ret

Disassembly of section .text.is_pressed:

00000f58 <is_pressed>:
		}
	}
	return 0;
}

int is_pressed(int r, int c) {
 f58:	cf 93       	push	r28
 f5a:	df 93       	push	r29
	DDRC=0;
 f5c:	14 ba       	out	0x14, r1	; 20
	PORTC=0; //N/c
 f5e:	15 ba       	out	0x15, r1	; 21
	SET_BIT(DDRC,r);
 f60:	44 b3       	in	r20, 0x14	; 20
 f62:	21 e0       	ldi	r18, 0x01	; 1
 f64:	30 e0       	ldi	r19, 0x00	; 0
 f66:	f9 01       	movw	r30, r18
 f68:	02 c0       	rjmp	.+4      	; 0xf6e <is_pressed+0x16>
 f6a:	ee 0f       	add	r30, r30
 f6c:	ff 1f       	adc	r31, r31
 f6e:	8a 95       	dec	r24
 f70:	e2 f7       	brpl	.-8      	; 0xf6a <is_pressed+0x12>
 f72:	cf 01       	movw	r24, r30
 f74:	4e 2b       	or	r20, r30
 f76:	44 bb       	out	0x14, r20	; 20
	CLR_BIT(PORTC,r);//"0"
 f78:	95 b3       	in	r25, 0x15	; 21
 f7a:	80 95       	com	r24
 f7c:	89 23       	and	r24, r25
 f7e:	85 bb       	out	0x15, r24	; 21
	SET_BIT(PORTC,c+4);//"W1"
 f80:	85 b3       	in	r24, 0x15	; 21
 f82:	eb 01       	movw	r28, r22
 f84:	24 96       	adiw	r28, 0x04	; 4
 f86:	0c 2e       	mov	r0, r28
 f88:	02 c0       	rjmp	.+4      	; 0xf8e <is_pressed+0x36>
 f8a:	22 0f       	add	r18, r18
 f8c:	33 1f       	adc	r19, r19
 f8e:	0a 94       	dec	r0
 f90:	e2 f7       	brpl	.-8      	; 0xf8a <is_pressed+0x32>
 f92:	28 2b       	or	r18, r24
 f94:	25 bb       	out	0x15, r18	; 21
	//wait
	avr_wait(10);
 f96:	8a e0       	ldi	r24, 0x0A	; 10
 f98:	90 e0       	ldi	r25, 0x00	; 0
 f9a:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	if(!GET_BIT(PINC, c+4)) {
 f9e:	83 b3       	in	r24, 0x13	; 19
 fa0:	90 e0       	ldi	r25, 0x00	; 0
 fa2:	02 c0       	rjmp	.+4      	; 0xfa8 <is_pressed+0x50>
 fa4:	95 95       	asr	r25
 fa6:	87 95       	ror	r24
 fa8:	ca 95       	dec	r28
 faa:	e2 f7       	brpl	.-8      	; 0xfa4 <is_pressed+0x4c>
 fac:	80 fd       	sbrc	r24, 0
 fae:	03 c0       	rjmp	.+6      	; 0xfb6 <is_pressed+0x5e>
		return 1;
 fb0:	81 e0       	ldi	r24, 0x01	; 1
 fb2:	90 e0       	ldi	r25, 0x00	; 0
 fb4:	02 c0       	rjmp	.+4      	; 0xfba <is_pressed+0x62>
	}
	return 0;
 fb6:	80 e0       	ldi	r24, 0x00	; 0
 fb8:	90 e0       	ldi	r25, 0x00	; 0
}
 fba:	df 91       	pop	r29
 fbc:	cf 91       	pop	r28
 fbe:	08 95       	ret

Disassembly of section .text.get_key:

000010ce <get_key>:
4 5 6 b
7 8 9 c
* 0 # d
*/

int get_key() {
    10ce:	0f 93       	push	r16
    10d0:	1f 93       	push	r17
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
	//goes in order of rows since is_pressed flips from 0 -> 4 for row numbering
	int i,j;
	for(i = 3; i >= 0; i--) {
    10d6:	03 e0       	ldi	r16, 0x03	; 3
    10d8:	10 e0       	ldi	r17, 0x00	; 0
    10da:	18 c0       	rjmp	.+48     	; 0x110c <get_key+0x3e>
		for(j = 0; j < 4; ++j) {
			if(is_pressed(i,j)) {
    10dc:	be 01       	movw	r22, r28
    10de:	c8 01       	movw	r24, r16
    10e0:	0e 94 ac 07 	call	0xf58	; 0xf58 <is_pressed>
    10e4:	89 2b       	or	r24, r25
    10e6:	49 f0       	breq	.+18     	; 0x10fa <get_key+0x2c>
				return i*4+j+1;
    10e8:	c8 01       	movw	r24, r16
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	88 0f       	add	r24, r24
    10f0:	99 1f       	adc	r25, r25
    10f2:	8c 0f       	add	r24, r28
    10f4:	9d 1f       	adc	r25, r29
    10f6:	01 96       	adiw	r24, 0x01	; 1
    10f8:	0d c0       	rjmp	.+26     	; 0x1114 <get_key+0x46>

int get_key() {
	//goes in order of rows since is_pressed flips from 0 -> 4 for row numbering
	int i,j;
	for(i = 3; i >= 0; i--) {
		for(j = 0; j < 4; ++j) {
    10fa:	21 96       	adiw	r28, 0x01	; 1
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <get_key+0x34>
    10fe:	c0 e0       	ldi	r28, 0x00	; 0
    1100:	d0 e0       	ldi	r29, 0x00	; 0
    1102:	c4 30       	cpi	r28, 0x04	; 4
    1104:	d1 05       	cpc	r29, r1
    1106:	54 f3       	brlt	.-44     	; 0x10dc <get_key+0xe>
*/

int get_key() {
	//goes in order of rows since is_pressed flips from 0 -> 4 for row numbering
	int i,j;
	for(i = 3; i >= 0; i--) {
    1108:	01 50       	subi	r16, 0x01	; 1
    110a:	11 09       	sbc	r17, r1
    110c:	11 23       	and	r17, r17
    110e:	bc f7       	brge	.-18     	; 0x10fe <get_key+0x30>
			if(is_pressed(i,j)) {
				return i*4+j+1;
			}
		}
	}
	return 0;
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	90 e0       	ldi	r25, 0x00	; 0
}
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

Disassembly of section .text.is_number:

000013d6 <is_number>:
	}
	return 0;
}

int is_number(int k) {
	return(k % 4 && k != 13 && k != 15);
    13d6:	9c 01       	movw	r18, r24
    13d8:	23 70       	andi	r18, 0x03	; 3
    13da:	33 27       	eor	r19, r19
    13dc:	23 2b       	or	r18, r19
    13de:	41 f0       	breq	.+16     	; 0x13f0 <is_number+0x1a>
    13e0:	8d 30       	cpi	r24, 0x0D	; 13
    13e2:	91 05       	cpc	r25, r1
    13e4:	41 f0       	breq	.+16     	; 0x13f6 <is_number+0x20>
    13e6:	0f 97       	sbiw	r24, 0x0f	; 15
    13e8:	49 f4       	brne	.+18     	; 0x13fc <is_number+0x26>
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	08 95       	ret
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	08 95       	ret
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    13fa:	08 95       	ret
    13fc:	81 e0       	ldi	r24, 0x01	; 1
    13fe:	90 e0       	ldi	r25, 0x00	; 0
}
    1400:	08 95       	ret

Disassembly of section .text.convert:

0000107a <convert>:

int convert(int k) {
	//convert k into actual number rather than keypad associated row column
	switch(k) {
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	8e 30       	cpi	r24, 0x0E	; 14
    107e:	91 05       	cpc	r25, r1
    1080:	00 f5       	brcc	.+64     	; 0x10c2 <convert+0x48>
    1082:	86 5d       	subi	r24, 0xD6	; 214
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	fc 01       	movw	r30, r24
    1088:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__tablejump2__>
		case 14:
			return 0;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	08 95       	ret
		case 9:
			return 7;
		case 10:
			return 8;
    1092:	88 e0       	ldi	r24, 0x08	; 8
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	08 95       	ret
		case 11:
			return 9;
    1098:	89 e0       	ldi	r24, 0x09	; 9
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	08 95       	ret
		case 5:
			return 4;
    109e:	84 e0       	ldi	r24, 0x04	; 4
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	08 95       	ret
		case 6:
			return 5;
    10a4:	85 e0       	ldi	r24, 0x05	; 5
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	08 95       	ret
		case 7:
			return 6;
    10aa:	86 e0       	ldi	r24, 0x06	; 6
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	08 95       	ret
		case 1:
			return 1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	08 95       	ret
		case 2:
			return 2;
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	08 95       	ret
		case 3:
			return 3;
    10bc:	83 e0       	ldi	r24, 0x03	; 3
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	08 95       	ret
	}
	return 10;
    10c2:	8a e0       	ldi	r24, 0x0A	; 10
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	08 95       	ret
	//convert k into actual number rather than keypad associated row column
	switch(k) {
		case 14:
			return 0;
		case 9:
			return 7;
    10c8:	87 e0       	ldi	r24, 0x07	; 7
    10ca:	90 e0       	ldi	r25, 0x00	; 0
			return 2;
		case 3:
			return 3;
	}
	return 10;
}
    10cc:	08 95       	ret

Disassembly of section .text.init_dt:

00001402 <init_dt>:

void init_dt(struct dt *mydt) {
    1402:	fc 01       	movw	r30, r24
	mydt -> year = 2022;
    1404:	86 ee       	ldi	r24, 0xE6	; 230
    1406:	97 e0       	ldi	r25, 0x07	; 7
    1408:	91 83       	std	Z+1, r25	; 0x01
    140a:	80 83       	st	Z, r24
	mydt -> month = 1;
    140c:	81 e0       	ldi	r24, 0x01	; 1
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	93 83       	std	Z+3, r25	; 0x03
    1412:	82 83       	std	Z+2, r24	; 0x02
	mydt -> day = 1;
    1414:	95 83       	std	Z+5, r25	; 0x05
    1416:	84 83       	std	Z+4, r24	; 0x04
	mydt -> hour = 1;
    1418:	97 83       	std	Z+7, r25	; 0x07
    141a:	86 83       	std	Z+6, r24	; 0x06
	mydt -> minute = 0;
    141c:	11 86       	std	Z+9, r1	; 0x09
    141e:	10 86       	std	Z+8, r1	; 0x08
	mydt -> second = 0;
    1420:	13 86       	std	Z+11, r1	; 0x0b
    1422:	12 86       	std	Z+10, r1	; 0x0a
	mydt -> type = 0;
    1424:	15 86       	std	Z+13, r1	; 0x0d
    1426:	14 86       	std	Z+12, r1	; 0x0c
	mydt -> aorp = 0; // am
    1428:	17 86       	std	Z+15, r1	; 0x0f
    142a:	16 86       	std	Z+14, r1	; 0x0e
    142c:	08 95       	ret

Disassembly of section .text.recalc_time:

000011b4 <recalc_time>:
	// normal time should be edited
	// calc for invalid time roll over
	recalc_time(dt);
}

void recalc_time(struct dt *dt) { // sets time to roll over extra alloted time during setting but doesn't change date
    11b4:	fc 01       	movw	r30, r24
	if(dt->second == 60) {
    11b6:	82 85       	ldd	r24, Z+10	; 0x0a
    11b8:	93 85       	ldd	r25, Z+11	; 0x0b
    11ba:	cc 97       	sbiw	r24, 0x3c	; 60
    11bc:	39 f4       	brne	.+14     	; 0x11cc <recalc_time+0x18>
		++dt->minute;
    11be:	80 85       	ldd	r24, Z+8	; 0x08
    11c0:	91 85       	ldd	r25, Z+9	; 0x09
    11c2:	01 96       	adiw	r24, 0x01	; 1
    11c4:	91 87       	std	Z+9, r25	; 0x09
    11c6:	80 87       	std	Z+8, r24	; 0x08
		dt->second = 0;
    11c8:	13 86       	std	Z+11, r1	; 0x0b
    11ca:	12 86       	std	Z+10, r1	; 0x0a
	}
	if(dt->minute == 60) {
    11cc:	80 85       	ldd	r24, Z+8	; 0x08
    11ce:	91 85       	ldd	r25, Z+9	; 0x09
    11d0:	cc 97       	sbiw	r24, 0x3c	; 60
    11d2:	39 f4       	brne	.+14     	; 0x11e2 <recalc_time+0x2e>
		++dt->hour;
    11d4:	86 81       	ldd	r24, Z+6	; 0x06
    11d6:	97 81       	ldd	r25, Z+7	; 0x07
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	97 83       	std	Z+7, r25	; 0x07
    11dc:	86 83       	std	Z+6, r24	; 0x06
		dt->minute = 0;
    11de:	11 86       	std	Z+9, r1	; 0x09
    11e0:	10 86       	std	Z+8, r1	; 0x08
	}
	if(dt->hour == 13) {
    11e2:	86 81       	ldd	r24, Z+6	; 0x06
    11e4:	97 81       	ldd	r25, Z+7	; 0x07
    11e6:	0d 97       	sbiw	r24, 0x0d	; 13
    11e8:	21 f4       	brne	.+8      	; 0x11f2 <recalc_time+0x3e>
		dt->hour = 1;
    11ea:	81 e0       	ldi	r24, 0x01	; 1
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	97 83       	std	Z+7, r25	; 0x07
    11f0:	86 83       	std	Z+6, r24	; 0x06
    11f2:	08 95       	ret

Disassembly of section .text.set_time:

000007c2 <set_time>:
	dt->year = value;
	//recheck days based on year
	dt->day = dt->day % month_days(dt);
}

void set_time(struct dt *dt) {
 7c2:	cf 92       	push	r12
 7c4:	df 92       	push	r13
 7c6:	ef 92       	push	r14
 7c8:	ff 92       	push	r15
 7ca:	0f 93       	push	r16
 7cc:	1f 93       	push	r17
 7ce:	cf 93       	push	r28
 7d0:	df 93       	push	r29
 7d2:	cd b7       	in	r28, 0x3d	; 61
 7d4:	de b7       	in	r29, 0x3e	; 62
 7d6:	64 97       	sbiw	r28, 0x14	; 20
 7d8:	0f b6       	in	r0, 0x3f	; 63
 7da:	f8 94       	cli
 7dc:	de bf       	out	0x3e, r29	; 62
 7de:	0f be       	out	0x3f, r0	; 63
 7e0:	cd bf       	out	0x3d, r28	; 61
 7e2:	6c 01       	movw	r12, r24
	//change time structure
	char buf[20];
	int press, con, value=-1;
	avr_wait(500); // wait
 7e4:	84 ef       	ldi	r24, 0xF4	; 244
 7e6:	91 e0       	ldi	r25, 0x01	; 1
 7e8:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
}

void set_time(struct dt *dt) {
	//change time structure
	char buf[20];
	int press, con, value=-1;
 7ec:	ee 24       	eor	r14, r14
 7ee:	ea 94       	dec	r14
 7f0:	fe 2c       	mov	r15, r14
	avr_wait(500); // wait
	while((press = get_key()) != 4){ //wait for A press
 7f2:	40 c0       	rjmp	.+128    	; 0x874 <__stack+0x15>
		if(press) { // some key is pressed check is press is number and then convert
 7f4:	01 15       	cp	r16, r1
 7f6:	11 05       	cpc	r17, r1
 7f8:	e9 f1       	breq	.+122    	; 0x874 <__stack+0x15>
			if(is_number(press)) {
 7fa:	c8 01       	movw	r24, r16
 7fc:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <is_number>
 800:	89 2b       	or	r24, r25
 802:	a1 f1       	breq	.+104    	; 0x86c <__stack+0xd>
				con = convert(press);
 804:	c8 01       	movw	r24, r16
 806:	0e 94 3d 08 	call	0x107a	; 0x107a <convert>
				if(value == -1) {
 80a:	2f ef       	ldi	r18, 0xFF	; 255
 80c:	e2 16       	cp	r14, r18
 80e:	f2 06       	cpc	r15, r18
 810:	71 f0       	breq	.+28     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
					value = con;
				}
				else {
					value = value * 10 + con;
 812:	97 01       	movw	r18, r14
 814:	22 0f       	add	r18, r18
 816:	33 1f       	adc	r19, r19
 818:	ee 0c       	add	r14, r14
 81a:	ff 1c       	adc	r15, r15
 81c:	ee 0c       	add	r14, r14
 81e:	ff 1c       	adc	r15, r15
 820:	ee 0c       	add	r14, r14
 822:	ff 1c       	adc	r15, r15
 824:	e2 0e       	add	r14, r18
 826:	f3 1e       	adc	r15, r19
 828:	e8 0e       	add	r14, r24
 82a:	f9 1e       	adc	r15, r25
 82c:	01 c0       	rjmp	.+2      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
	while((press = get_key()) != 4){ //wait for A press
		if(press) { // some key is pressed check is press is number and then convert
			if(is_number(press)) {
				con = convert(press);
				if(value == -1) {
					value = con;
 82e:	7c 01       	movw	r14, r24
				}
				else {
					value = value * 10 + con;
				}
				sprintf(buf,"Hour: %d", value);
 830:	ff 92       	push	r15
 832:	ef 92       	push	r14
 834:	80 ea       	ldi	r24, 0xA0	; 160
 836:	90 e0       	ldi	r25, 0x00	; 0
 838:	a0 e0       	ldi	r26, 0x00	; 0
 83a:	af 93       	push	r26
 83c:	9f 93       	push	r25
 83e:	8f 93       	push	r24
 840:	8e 01       	movw	r16, r28
 842:	0f 5f       	subi	r16, 0xFF	; 255
 844:	1f 4f       	sbci	r17, 0xFF	; 255
 846:	1f 93       	push	r17
 848:	0f 93       	push	r16
 84a:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
				lcd_clr();
 84e:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
				lcd_pos(0,0);
 852:	60 e0       	ldi	r22, 0x00	; 0
 854:	80 e0       	ldi	r24, 0x00	; 0
 856:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
				lcd_puts2(buf);
 85a:	b8 01       	movw	r22, r16
 85c:	80 e8       	ldi	r24, 0x80	; 128
 85e:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
 862:	0f b6       	in	r0, 0x3f	; 63
 864:	f8 94       	cli
 866:	de bf       	out	0x3e, r29	; 62
 868:	0f be       	out	0x3f, r0	; 63
 86a:	cd bf       	out	0x3d, r28	; 61
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
 86c:	88 ee       	ldi	r24, 0xE8	; 232
 86e:	93 e0       	ldi	r25, 0x03	; 3
 870:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
void set_time(struct dt *dt) {
	//change time structure
	char buf[20];
	int press, con, value=-1;
	avr_wait(500); // wait
	while((press = get_key()) != 4){ //wait for A press
 874:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 878:	8c 01       	movw	r16, r24
 87a:	04 97       	sbiw	r24, 0x04	; 4
 87c:	09 f0       	breq	.+2      	; 0x880 <__stack+0x21>
 87e:	ba cf       	rjmp	.-140    	; 0x7f4 <set_time+0x32>
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	// verify dt for incorrect value insertion
	// different method for military time insertion
	if(value != -1)
 880:	9f ef       	ldi	r25, 0xFF	; 255
 882:	e9 16       	cp	r14, r25
 884:	f9 06       	cpc	r15, r25
 886:	19 f0       	breq	.+6      	; 0x88e <__stack+0x2f>
		dt->hour = value;
 888:	f6 01       	movw	r30, r12
 88a:	f7 82       	std	Z+7, r15	; 0x07
 88c:	e6 82       	std	Z+6, r14	; 0x06
	value = -1;
	avr_wait(500);
 88e:	84 ef       	ldi	r24, 0xF4	; 244
 890:	91 e0       	ldi	r25, 0x01	; 1
 892:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	}
	// verify dt for incorrect value insertion
	// different method for military time insertion
	if(value != -1)
		dt->hour = value;
	value = -1;
 896:	ee 24       	eor	r14, r14
 898:	ea 94       	dec	r14
 89a:	fe 2c       	mov	r15, r14
	avr_wait(500);
	while((press = get_key()) != 4){
 89c:	40 c0       	rjmp	.+128    	; 0x91e <__stack+0xbf>
		if(press) { // some key is pressed
 89e:	01 15       	cp	r16, r1
 8a0:	11 05       	cpc	r17, r1
 8a2:	e9 f1       	breq	.+122    	; 0x91e <__stack+0xbf>
			if(is_number(press)) {
 8a4:	c8 01       	movw	r24, r16
 8a6:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <is_number>
 8aa:	89 2b       	or	r24, r25
 8ac:	a1 f1       	breq	.+104    	; 0x916 <__stack+0xb7>
				con = convert(press);
 8ae:	c8 01       	movw	r24, r16
 8b0:	0e 94 3d 08 	call	0x107a	; 0x107a <convert>
				if(value == -1) {
 8b4:	ff ef       	ldi	r31, 0xFF	; 255
 8b6:	ef 16       	cp	r14, r31
 8b8:	ff 06       	cpc	r15, r31
 8ba:	71 f0       	breq	.+28     	; 0x8d8 <__stack+0x79>
					value = con;
				}
				else {
					value = value * 10 + con;
 8bc:	97 01       	movw	r18, r14
 8be:	22 0f       	add	r18, r18
 8c0:	33 1f       	adc	r19, r19
 8c2:	ee 0c       	add	r14, r14
 8c4:	ff 1c       	adc	r15, r15
 8c6:	ee 0c       	add	r14, r14
 8c8:	ff 1c       	adc	r15, r15
 8ca:	ee 0c       	add	r14, r14
 8cc:	ff 1c       	adc	r15, r15
 8ce:	e2 0e       	add	r14, r18
 8d0:	f3 1e       	adc	r15, r19
 8d2:	e8 0e       	add	r14, r24
 8d4:	f9 1e       	adc	r15, r25
 8d6:	01 c0       	rjmp	.+2      	; 0x8da <__stack+0x7b>
	while((press = get_key()) != 4){
		if(press) { // some key is pressed
			if(is_number(press)) {
				con = convert(press);
				if(value == -1) {
					value = con;
 8d8:	7c 01       	movw	r14, r24
				}
				else {
					value = value * 10 + con;
				}
				sprintf(buf,"Minute: %d", value);
 8da:	ff 92       	push	r15
 8dc:	ef 92       	push	r14
 8de:	89 ea       	ldi	r24, 0xA9	; 169
 8e0:	90 e0       	ldi	r25, 0x00	; 0
 8e2:	a0 e0       	ldi	r26, 0x00	; 0
 8e4:	af 93       	push	r26
 8e6:	9f 93       	push	r25
 8e8:	8f 93       	push	r24
 8ea:	8e 01       	movw	r16, r28
 8ec:	0f 5f       	subi	r16, 0xFF	; 255
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	1f 93       	push	r17
 8f2:	0f 93       	push	r16
 8f4:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
				lcd_clr();
 8f8:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
				lcd_pos(0,0);
 8fc:	60 e0       	ldi	r22, 0x00	; 0
 8fe:	80 e0       	ldi	r24, 0x00	; 0
 900:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
				lcd_puts2(buf);
 904:	b8 01       	movw	r22, r16
 906:	80 e8       	ldi	r24, 0x80	; 128
 908:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
 90c:	0f b6       	in	r0, 0x3f	; 63
 90e:	f8 94       	cli
 910:	de bf       	out	0x3e, r29	; 62
 912:	0f be       	out	0x3f, r0	; 63
 914:	cd bf       	out	0x3d, r28	; 61
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
 916:	88 ee       	ldi	r24, 0xE8	; 232
 918:	93 e0       	ldi	r25, 0x03	; 3
 91a:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	// different method for military time insertion
	if(value != -1)
		dt->hour = value;
	value = -1;
	avr_wait(500);
	while((press = get_key()) != 4){
 91e:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 922:	8c 01       	movw	r16, r24
 924:	04 97       	sbiw	r24, 0x04	; 4
 926:	09 f0       	breq	.+2      	; 0x92a <__stack+0xcb>
 928:	ba cf       	rjmp	.-140    	; 0x89e <__stack+0x3f>
				lcd_puts2(buf);
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	if(value != -1)
 92a:	9f ef       	ldi	r25, 0xFF	; 255
 92c:	e9 16       	cp	r14, r25
 92e:	f9 06       	cpc	r15, r25
 930:	19 f0       	breq	.+6      	; 0x938 <__stack+0xd9>
		dt->minute = value;
 932:	f6 01       	movw	r30, r12
 934:	f1 86       	std	Z+9, r15	; 0x09
 936:	e0 86       	std	Z+8, r14	; 0x08
	avr_wait(500);
 938:	84 ef       	ldi	r24, 0xF4	; 244
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	value = -1;
 940:	ee 24       	eor	r14, r14
 942:	ea 94       	dec	r14
 944:	fe 2c       	mov	r15, r14
	while((press = get_key()) != 4){
 946:	40 c0       	rjmp	.+128    	; 0x9c8 <__stack+0x169>
		if(press) { // some key is pressed
 948:	01 15       	cp	r16, r1
 94a:	11 05       	cpc	r17, r1
 94c:	e9 f1       	breq	.+122    	; 0x9c8 <__stack+0x169>
			if(is_number(press)) {
 94e:	c8 01       	movw	r24, r16
 950:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <is_number>
 954:	89 2b       	or	r24, r25
 956:	a1 f1       	breq	.+104    	; 0x9c0 <__stack+0x161>
				con = convert(press);
 958:	c8 01       	movw	r24, r16
 95a:	0e 94 3d 08 	call	0x107a	; 0x107a <convert>
				if(value == -1) {
 95e:	ff ef       	ldi	r31, 0xFF	; 255
 960:	ef 16       	cp	r14, r31
 962:	ff 06       	cpc	r15, r31
 964:	71 f0       	breq	.+28     	; 0x982 <__stack+0x123>
					value = con;
				}
				else {
					value = value * 10 + con;
 966:	97 01       	movw	r18, r14
 968:	22 0f       	add	r18, r18
 96a:	33 1f       	adc	r19, r19
 96c:	ee 0c       	add	r14, r14
 96e:	ff 1c       	adc	r15, r15
 970:	ee 0c       	add	r14, r14
 972:	ff 1c       	adc	r15, r15
 974:	ee 0c       	add	r14, r14
 976:	ff 1c       	adc	r15, r15
 978:	e2 0e       	add	r14, r18
 97a:	f3 1e       	adc	r15, r19
 97c:	e8 0e       	add	r14, r24
 97e:	f9 1e       	adc	r15, r25
 980:	01 c0       	rjmp	.+2      	; 0x984 <__stack+0x125>
	while((press = get_key()) != 4){
		if(press) { // some key is pressed
			if(is_number(press)) {
				con = convert(press);
				if(value == -1) {
					value = con;
 982:	7c 01       	movw	r14, r24
				}
				else {
					value = value * 10 + con;
				}
				sprintf(buf,"Second: %d", value);
 984:	ff 92       	push	r15
 986:	ef 92       	push	r14
 988:	84 eb       	ldi	r24, 0xB4	; 180
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	a0 e0       	ldi	r26, 0x00	; 0
 98e:	af 93       	push	r26
 990:	9f 93       	push	r25
 992:	8f 93       	push	r24
 994:	8e 01       	movw	r16, r28
 996:	0f 5f       	subi	r16, 0xFF	; 255
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	1f 93       	push	r17
 99c:	0f 93       	push	r16
 99e:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
				lcd_clr();
 9a2:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
				lcd_pos(0,0);
 9a6:	60 e0       	ldi	r22, 0x00	; 0
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
				lcd_puts2(buf);
 9ae:	b8 01       	movw	r22, r16
 9b0:	80 e8       	ldi	r24, 0x80	; 128
 9b2:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
 9b6:	0f b6       	in	r0, 0x3f	; 63
 9b8:	f8 94       	cli
 9ba:	de bf       	out	0x3e, r29	; 62
 9bc:	0f be       	out	0x3f, r0	; 63
 9be:	cd bf       	out	0x3d, r28	; 61
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
 9c0:	88 ee       	ldi	r24, 0xE8	; 232
 9c2:	93 e0       	ldi	r25, 0x03	; 3
 9c4:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	}
	if(value != -1)
		dt->minute = value;
	avr_wait(500);
	value = -1;
	while((press = get_key()) != 4){
 9c8:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 9cc:	8c 01       	movw	r16, r24
 9ce:	04 97       	sbiw	r24, 0x04	; 4
 9d0:	09 f0       	breq	.+2      	; 0x9d4 <__stack+0x175>
 9d2:	ba cf       	rjmp	.-140    	; 0x948 <__stack+0xe9>
				lcd_puts2(buf);
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	if(value != -1)
 9d4:	9f ef       	ldi	r25, 0xFF	; 255
 9d6:	e9 16       	cp	r14, r25
 9d8:	f9 06       	cpc	r15, r25
 9da:	19 f0       	breq	.+6      	; 0x9e2 <__stack+0x183>
		dt->second = value;
 9dc:	f6 01       	movw	r30, r12
 9de:	f3 86       	std	Z+11, r15	; 0x0b
 9e0:	e2 86       	std	Z+10, r14	; 0x0a
	// normal time should be edited
	// calc for invalid time roll over
	recalc_time(dt);
 9e2:	c6 01       	movw	r24, r12
 9e4:	0e 94 da 08 	call	0x11b4	; 0x11b4 <recalc_time>
}
 9e8:	64 96       	adiw	r28, 0x14	; 20
 9ea:	0f b6       	in	r0, 0x3f	; 63
 9ec:	f8 94       	cli
 9ee:	de bf       	out	0x3e, r29	; 62
 9f0:	0f be       	out	0x3f, r0	; 63
 9f2:	cd bf       	out	0x3d, r28	; 61
 9f4:	df 91       	pop	r29
 9f6:	cf 91       	pop	r28
 9f8:	1f 91       	pop	r17
 9fa:	0f 91       	pop	r16
 9fc:	ff 90       	pop	r15
 9fe:	ef 90       	pop	r14
 a00:	df 90       	pop	r13
 a02:	cf 90       	pop	r12
 a04:	08 95       	ret

Disassembly of section .text.set_ampm:

00000e66 <set_ampm>:
	if(dt->hour == 13) {
		dt->hour = 1;
	}
}

void set_ampm(struct dt *dt) {
 e66:	ef 92       	push	r14
 e68:	ff 92       	push	r15
 e6a:	0f 93       	push	r16
 e6c:	1f 93       	push	r17
 e6e:	cf 93       	push	r28
 e70:	df 93       	push	r29
 e72:	cd b7       	in	r28, 0x3d	; 61
 e74:	de b7       	in	r29, 0x3e	; 62
 e76:	64 97       	sbiw	r28, 0x14	; 20
 e78:	0f b6       	in	r0, 0x3f	; 63
 e7a:	f8 94       	cli
 e7c:	de bf       	out	0x3e, r29	; 62
 e7e:	0f be       	out	0x3f, r0	; 63
 e80:	cd bf       	out	0x3d, r28	; 61
 e82:	8c 01       	movw	r16, r24
	int press;
	char buf[20];
	avr_wait(500); // wait
 e84:	84 ef       	ldi	r24, 0xF4	; 244
 e86:	91 e0       	ldi	r25, 0x01	; 1
 e88:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	sprintf(buf,"AM = 1 PM = 2");
 e8c:	2e e0       	ldi	r18, 0x0E	; 14
 e8e:	30 e0       	ldi	r19, 0x00	; 0
 e90:	4f eb       	ldi	r20, 0xBF	; 191
 e92:	50 e0       	ldi	r21, 0x00	; 0
 e94:	60 e0       	ldi	r22, 0x00	; 0
 e96:	ce 01       	movw	r24, r28
 e98:	01 96       	adiw	r24, 0x01	; 1
 e9a:	7c 01       	movw	r14, r24
 e9c:	0e 94 ba 09 	call	0x1374	; 0x1374 <memcpy>
	lcd_clr();
 ea0:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
	lcd_pos(0,0);
 ea4:	60 e0       	ldi	r22, 0x00	; 0
 ea6:	80 e0       	ldi	r24, 0x00	; 0
 ea8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
	lcd_puts2(buf);
 eac:	b7 01       	movw	r22, r14
 eae:	80 e8       	ldi	r24, 0x80	; 128
 eb0:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
	while((press = get_key()) > 2); //wait for 1 or 2 press
 eb4:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 eb8:	83 30       	cpi	r24, 0x03	; 3
 eba:	91 05       	cpc	r25, r1
 ebc:	dc f7       	brge	.-10     	; 0xeb4 <set_ampm+0x4e>
	dt->aorp = press-1;
 ebe:	01 97       	sbiw	r24, 0x01	; 1
 ec0:	f8 01       	movw	r30, r16
 ec2:	97 87       	std	Z+15, r25	; 0x0f
 ec4:	86 87       	std	Z+14, r24	; 0x0e
}
 ec6:	64 96       	adiw	r28, 0x14	; 20
 ec8:	0f b6       	in	r0, 0x3f	; 63
 eca:	f8 94       	cli
 ecc:	de bf       	out	0x3e, r29	; 62
 ece:	0f be       	out	0x3f, r0	; 63
 ed0:	cd bf       	out	0x3d, r28	; 61
 ed2:	df 91       	pop	r29
 ed4:	cf 91       	pop	r28
 ed6:	1f 91       	pop	r17
 ed8:	0f 91       	pop	r16
 eda:	ff 90       	pop	r15
 edc:	ef 90       	pop	r14
 ede:	08 95       	ret

Disassembly of section .text.month_days:

0000111e <month_days>:

int month_days(const struct dt *dt) {
    111e:	9b 01       	movw	r18, r22
    1120:	48 2f       	mov	r20, r24
	switch(dt->month) {
    1122:	a8 2f       	mov	r26, r24
    1124:	cb 01       	movw	r24, r22
    1126:	02 96       	adiw	r24, 0x02	; 2
    1128:	a1 1d       	adc	r26, r1
    112a:	fc 01       	movw	r30, r24
    112c:	5a 2f       	mov	r21, r26
    112e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
    1132:	fb 01       	movw	r30, r22
    1134:	31 97       	sbiw	r30, 0x01	; 1
    1136:	ec 30       	cpi	r30, 0x0C	; 12
    1138:	f1 05       	cpc	r31, r1
    113a:	80 f4       	brcc	.+32     	; 0x115c <month_days+0x3e>
    113c:	e8 5c       	subi	r30, 0xC8	; 200
    113e:	ff 4f       	sbci	r31, 0xFF	; 255
    1140:	0c 94 7f 0a 	jmp	0x14fe	; 0x14fe <__tablejump2__>
		case 5:
		case 7:
		case 8:
		case 10:
		case 12:
			return 31;
    1144:	8f e1       	ldi	r24, 0x1F	; 31
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	08 95       	ret
		case 2:
			if(!dt->year % 4)
    114a:	f9 01       	movw	r30, r18
    114c:	54 2f       	mov	r21, r20
    114e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
    1152:	67 2b       	or	r22, r23
    1154:	49 f4       	brne	.+18     	; 0x1168 <month_days+0x4a>
				return 29;
    1156:	8d e1       	ldi	r24, 0x1D	; 29
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	08 95       	ret
		case 6:
		case 9:
		case 11:
			return 30;
		default: 
			return 0;
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	08 95       	ret
			return 28;
		case 4:
		case 6:
		case 9:
		case 11:
			return 30;
    1162:	8e e1       	ldi	r24, 0x1E	; 30
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	08 95       	ret
		case 12:
			return 31;
		case 2:
			if(!dt->year % 4)
				return 29;
			return 28;
    1168:	8c e1       	ldi	r24, 0x1C	; 28
    116a:	90 e0       	ldi	r25, 0x00	; 0
		case 11:
			return 30;
		default: 
			return 0;
	}
}
    116c:	08 95       	ret

Disassembly of section .text.advance_dt:

00000b7c <advance_dt>:
	mydt -> second = 0;
	mydt -> type = 0;
	mydt -> aorp = 0; // am
}

void advance_dt(struct dt *mydt) { 
 b7c:	cf 92       	push	r12
 b7e:	df 92       	push	r13
 b80:	ef 92       	push	r14
 b82:	ff 92       	push	r15
 b84:	0f 93       	push	r16
 b86:	1f 93       	push	r17
 b88:	cf 93       	push	r28
 b8a:	df 93       	push	r29
 b8c:	fc 01       	movw	r30, r24
	//doesn't calc military do math for it somewhere else
	++mydt->second;
 b8e:	22 85       	ldd	r18, Z+10	; 0x0a
 b90:	33 85       	ldd	r19, Z+11	; 0x0b
 b92:	2f 5f       	subi	r18, 0xFF	; 255
 b94:	3f 4f       	sbci	r19, 0xFF	; 255
 b96:	33 87       	std	Z+11, r19	; 0x0b
 b98:	22 87       	std	Z+10, r18	; 0x0a
	if(mydt->second == 60) {
 b9a:	2c 33       	cpi	r18, 0x3C	; 60
 b9c:	31 05       	cpc	r19, r1
 b9e:	09 f0       	breq	.+2      	; 0xba2 <advance_dt+0x26>
 ba0:	4b c0       	rjmp	.+150    	; 0xc38 <advance_dt+0xbc>
		++mydt->minute;
 ba2:	80 85       	ldd	r24, Z+8	; 0x08
 ba4:	91 85       	ldd	r25, Z+9	; 0x09
 ba6:	01 96       	adiw	r24, 0x01	; 1
 ba8:	91 87       	std	Z+9, r25	; 0x09
 baa:	80 87       	std	Z+8, r24	; 0x08
		mydt->second = 0;
 bac:	13 86       	std	Z+11, r1	; 0x0b
 bae:	12 86       	std	Z+10, r1	; 0x0a
		if(mydt->minute == 60) {
 bb0:	cc 97       	sbiw	r24, 0x3c	; 60
 bb2:	09 f0       	breq	.+2      	; 0xbb6 <advance_dt+0x3a>
 bb4:	41 c0       	rjmp	.+130    	; 0xc38 <advance_dt+0xbc>
 bb6:	ef 01       	movw	r28, r30
			++mydt->hour;
 bb8:	06 81       	ldd	r16, Z+6	; 0x06
 bba:	17 81       	ldd	r17, Z+7	; 0x07
 bbc:	0f 5f       	subi	r16, 0xFF	; 255
 bbe:	1f 4f       	sbci	r17, 0xFF	; 255
 bc0:	17 83       	std	Z+7, r17	; 0x07
 bc2:	06 83       	std	Z+6, r16	; 0x06
			mydt->minute = 0;
 bc4:	11 86       	std	Z+9, r1	; 0x09
 bc6:	10 86       	std	Z+8, r1	; 0x08
			if(mydt->hour == 12) {
 bc8:	0c 30       	cpi	r16, 0x0C	; 12
 bca:	11 05       	cpc	r17, r1
 bcc:	71 f5       	brne	.+92     	; 0xc2a <advance_dt+0xae>
				if(mydt->aorp) {
 bce:	e6 84       	ldd	r14, Z+14	; 0x0e
 bd0:	f7 84       	ldd	r15, Z+15	; 0x0f
 bd2:	e1 14       	cp	r14, r1
 bd4:	f1 04       	cpc	r15, r1
 bd6:	19 f1       	breq	.+70     	; 0xc1e <advance_dt+0xa2>
					//change day here
					++mydt->day;
 bd8:	c4 80       	ldd	r12, Z+4	; 0x04
 bda:	d5 80       	ldd	r13, Z+5	; 0x05
 bdc:	8f ef       	ldi	r24, 0xFF	; 255
 bde:	c8 1a       	sub	r12, r24
 be0:	d8 0a       	sbc	r13, r24
 be2:	d5 82       	std	Z+5, r13	; 0x05
 be4:	c4 82       	std	Z+4, r12	; 0x04
					if(mydt->day == (month_days(mydt) + 1)) {
 be6:	bf 01       	movw	r22, r30
 be8:	80 e8       	ldi	r24, 0x80	; 128
 bea:	0e 94 8f 08 	call	0x111e	; 0x111e <month_days>
 bee:	01 96       	adiw	r24, 0x01	; 1
 bf0:	c8 16       	cp	r12, r24
 bf2:	d9 06       	cpc	r13, r25
 bf4:	a1 f4       	brne	.+40     	; 0xc1e <advance_dt+0xa2>
						++mydt->month;
 bf6:	8a 81       	ldd	r24, Y+2	; 0x02
 bf8:	9b 81       	ldd	r25, Y+3	; 0x03
 bfa:	01 96       	adiw	r24, 0x01	; 1
 bfc:	9b 83       	std	Y+3, r25	; 0x03
 bfe:	8a 83       	std	Y+2, r24	; 0x02
						mydt->day = 1;
 c00:	21 e0       	ldi	r18, 0x01	; 1
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	3d 83       	std	Y+5, r19	; 0x05
 c06:	2c 83       	std	Y+4, r18	; 0x04
						if(mydt->month == 13){
 c08:	0d 97       	sbiw	r24, 0x0d	; 13
 c0a:	49 f4       	brne	.+18     	; 0xc1e <advance_dt+0xa2>
							mydt->month = 1;
 c0c:	81 e0       	ldi	r24, 0x01	; 1
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	9b 83       	std	Y+3, r25	; 0x03
 c12:	8a 83       	std	Y+2, r24	; 0x02
							++mydt->year;
 c14:	88 81       	ld	r24, Y
 c16:	99 81       	ldd	r25, Y+1	; 0x01
 c18:	01 96       	adiw	r24, 0x01	; 1
 c1a:	99 83       	std	Y+1, r25	; 0x01
 c1c:	88 83       	st	Y, r24
						}
					}
				}
				mydt->aorp = 1 - mydt->aorp; // at 12 flip am to pm and visa versa 
 c1e:	81 e0       	ldi	r24, 0x01	; 1
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	8e 19       	sub	r24, r14
 c24:	9f 09       	sbc	r25, r15
 c26:	9f 87       	std	Y+15, r25	; 0x0f
 c28:	8e 87       	std	Y+14, r24	; 0x0e
			}
			if(mydt->hour == 13) {
 c2a:	0d 30       	cpi	r16, 0x0D	; 13
 c2c:	11 05       	cpc	r17, r1
 c2e:	21 f4       	brne	.+8      	; 0xc38 <advance_dt+0xbc>
				mydt->hour = 1;
 c30:	81 e0       	ldi	r24, 0x01	; 1
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	9f 83       	std	Y+7, r25	; 0x07
 c36:	8e 83       	std	Y+6, r24	; 0x06
			}
		}
	}
}
 c38:	df 91       	pop	r29
 c3a:	cf 91       	pop	r28
 c3c:	1f 91       	pop	r17
 c3e:	0f 91       	pop	r16
 c40:	ff 90       	pop	r15
 c42:	ef 90       	pop	r14
 c44:	df 90       	pop	r13
 c46:	cf 90       	pop	r12
 c48:	08 95       	ret

Disassembly of section .text.set_date:

00000578 <set_date>:

void set_date(struct dt *dt) {
 578:	cf 92       	push	r12
 57a:	df 92       	push	r13
 57c:	ef 92       	push	r14
 57e:	ff 92       	push	r15
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	cd b7       	in	r28, 0x3d	; 61
 58a:	de b7       	in	r29, 0x3e	; 62
 58c:	64 97       	sbiw	r28, 0x14	; 20
 58e:	0f b6       	in	r0, 0x3f	; 63
 590:	f8 94       	cli
 592:	de bf       	out	0x3e, r29	; 62
 594:	0f be       	out	0x3f, r0	; 63
 596:	cd bf       	out	0x3d, r28	; 61
 598:	7c 01       	movw	r14, r24
	//change date structure
	char buf[20];
	int press, con, value=-1;
	avr_wait(500); // wait
 59a:	84 ef       	ldi	r24, 0xF4	; 244
 59c:	91 e0       	ldi	r25, 0x01	; 1
 59e:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
}

void set_date(struct dt *dt) {
	//change date structure
	char buf[20];
	int press, con, value=-1;
 5a2:	cc 24       	eor	r12, r12
 5a4:	ca 94       	dec	r12
 5a6:	dc 2c       	mov	r13, r12
	avr_wait(500); // wait
	while((press = get_key()) != 4){ //wait for A press
 5a8:	40 c0       	rjmp	.+128    	; 0x62a <set_date+0xb2>
		if(press) { // some key is pressed check is press is number and then convert
 5aa:	01 15       	cp	r16, r1
 5ac:	11 05       	cpc	r17, r1
 5ae:	e9 f1       	breq	.+122    	; 0x62a <set_date+0xb2>
			if(is_number(press)) {
 5b0:	c8 01       	movw	r24, r16
 5b2:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <is_number>
 5b6:	89 2b       	or	r24, r25
 5b8:	a1 f1       	breq	.+104    	; 0x622 <set_date+0xaa>
				con = convert(press);
 5ba:	c8 01       	movw	r24, r16
 5bc:	0e 94 3d 08 	call	0x107a	; 0x107a <convert>
				if(value == -1) {
 5c0:	2f ef       	ldi	r18, 0xFF	; 255
 5c2:	c2 16       	cp	r12, r18
 5c4:	d2 06       	cpc	r13, r18
 5c6:	71 f0       	breq	.+28     	; 0x5e4 <set_date+0x6c>
					value = con;
				}
				else {
					value = value * 10 + con;
 5c8:	96 01       	movw	r18, r12
 5ca:	22 0f       	add	r18, r18
 5cc:	33 1f       	adc	r19, r19
 5ce:	cc 0c       	add	r12, r12
 5d0:	dd 1c       	adc	r13, r13
 5d2:	cc 0c       	add	r12, r12
 5d4:	dd 1c       	adc	r13, r13
 5d6:	cc 0c       	add	r12, r12
 5d8:	dd 1c       	adc	r13, r13
 5da:	c2 0e       	add	r12, r18
 5dc:	d3 1e       	adc	r13, r19
 5de:	c8 0e       	add	r12, r24
 5e0:	d9 1e       	adc	r13, r25
 5e2:	01 c0       	rjmp	.+2      	; 0x5e6 <set_date+0x6e>
	while((press = get_key()) != 4){ //wait for A press
		if(press) { // some key is pressed check is press is number and then convert
			if(is_number(press)) {
				con = convert(press);
				if(value == -1) {
					value = con;
 5e4:	6c 01       	movw	r12, r24
				}
				else {
					value = value * 10 + con;
				}
				sprintf(buf,"Month: %02d", value);
 5e6:	df 92       	push	r13
 5e8:	cf 92       	push	r12
 5ea:	8d ec       	ldi	r24, 0xCD	; 205
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	a0 e0       	ldi	r26, 0x00	; 0
 5f0:	af 93       	push	r26
 5f2:	9f 93       	push	r25
 5f4:	8f 93       	push	r24
 5f6:	8e 01       	movw	r16, r28
 5f8:	0f 5f       	subi	r16, 0xFF	; 255
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	1f 93       	push	r17
 5fe:	0f 93       	push	r16
 600:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
				lcd_clr();
 604:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
				lcd_pos(0,0);
 608:	60 e0       	ldi	r22, 0x00	; 0
 60a:	80 e0       	ldi	r24, 0x00	; 0
 60c:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
				lcd_puts2(buf);
 610:	b8 01       	movw	r22, r16
 612:	80 e8       	ldi	r24, 0x80	; 128
 614:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
 622:	88 ee       	ldi	r24, 0xE8	; 232
 624:	93 e0       	ldi	r25, 0x03	; 3
 626:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
void set_date(struct dt *dt) {
	//change date structure
	char buf[20];
	int press, con, value=-1;
	avr_wait(500); // wait
	while((press = get_key()) != 4){ //wait for A press
 62a:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 62e:	8c 01       	movw	r16, r24
 630:	04 97       	sbiw	r24, 0x04	; 4
 632:	09 f0       	breq	.+2      	; 0x636 <set_date+0xbe>
 634:	ba cf       	rjmp	.-140    	; 0x5aa <set_date+0x32>
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	// verify dt for incorrect value insertion
	// different method for military time insertion
	dt->month = value % 12;
 636:	c6 01       	movw	r24, r12
 638:	6c e0       	ldi	r22, 0x0C	; 12
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
 640:	f7 01       	movw	r30, r14
 642:	93 83       	std	Z+3, r25	; 0x03
 644:	82 83       	std	Z+2, r24	; 0x02
	//day
	value = -1;
	avr_wait(500);
 646:	84 ef       	ldi	r24, 0xF4	; 244
 648:	91 e0       	ldi	r25, 0x01	; 1
 64a:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	}
	// verify dt for incorrect value insertion
	// different method for military time insertion
	dt->month = value % 12;
	//day
	value = -1;
 64e:	cc 24       	eor	r12, r12
 650:	ca 94       	dec	r12
 652:	dc 2c       	mov	r13, r12
	avr_wait(500);
	while((press = get_key()) != 4){
 654:	40 c0       	rjmp	.+128    	; 0x6d6 <set_date+0x15e>
		if(press) { // some key is pressed
 656:	01 15       	cp	r16, r1
 658:	11 05       	cpc	r17, r1
 65a:	e9 f1       	breq	.+122    	; 0x6d6 <set_date+0x15e>
			if(is_number(press)) {
 65c:	c8 01       	movw	r24, r16
 65e:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <is_number>
 662:	89 2b       	or	r24, r25
 664:	a1 f1       	breq	.+104    	; 0x6ce <set_date+0x156>
				con = convert(press);
 666:	c8 01       	movw	r24, r16
 668:	0e 94 3d 08 	call	0x107a	; 0x107a <convert>
				if(value == -1) {
 66c:	ff ef       	ldi	r31, 0xFF	; 255
 66e:	cf 16       	cp	r12, r31
 670:	df 06       	cpc	r13, r31
 672:	71 f0       	breq	.+28     	; 0x690 <set_date+0x118>
					value = con;
				}
				else {
					value = value * 10 + con;
 674:	96 01       	movw	r18, r12
 676:	22 0f       	add	r18, r18
 678:	33 1f       	adc	r19, r19
 67a:	cc 0c       	add	r12, r12
 67c:	dd 1c       	adc	r13, r13
 67e:	cc 0c       	add	r12, r12
 680:	dd 1c       	adc	r13, r13
 682:	cc 0c       	add	r12, r12
 684:	dd 1c       	adc	r13, r13
 686:	c2 0e       	add	r12, r18
 688:	d3 1e       	adc	r13, r19
 68a:	c8 0e       	add	r12, r24
 68c:	d9 1e       	adc	r13, r25
 68e:	01 c0       	rjmp	.+2      	; 0x692 <set_date+0x11a>
	while((press = get_key()) != 4){
		if(press) { // some key is pressed
			if(is_number(press)) {
				con = convert(press);
				if(value == -1) {
					value = con;
 690:	6c 01       	movw	r12, r24
				}
				else {
					value = value * 10 + con;
				}
				sprintf(buf,"Day: %02d", value);
 692:	df 92       	push	r13
 694:	cf 92       	push	r12
 696:	89 ed       	ldi	r24, 0xD9	; 217
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	a0 e0       	ldi	r26, 0x00	; 0
 69c:	af 93       	push	r26
 69e:	9f 93       	push	r25
 6a0:	8f 93       	push	r24
 6a2:	8e 01       	movw	r16, r28
 6a4:	0f 5f       	subi	r16, 0xFF	; 255
 6a6:	1f 4f       	sbci	r17, 0xFF	; 255
 6a8:	1f 93       	push	r17
 6aa:	0f 93       	push	r16
 6ac:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
				lcd_clr();
 6b0:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
				lcd_pos(0,0);
 6b4:	60 e0       	ldi	r22, 0x00	; 0
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
				lcd_puts2(buf);
 6bc:	b8 01       	movw	r22, r16
 6be:	80 e8       	ldi	r24, 0x80	; 128
 6c0:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
 6c4:	0f b6       	in	r0, 0x3f	; 63
 6c6:	f8 94       	cli
 6c8:	de bf       	out	0x3e, r29	; 62
 6ca:	0f be       	out	0x3f, r0	; 63
 6cc:	cd bf       	out	0x3d, r28	; 61
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
 6ce:	88 ee       	ldi	r24, 0xE8	; 232
 6d0:	93 e0       	ldi	r25, 0x03	; 3
 6d2:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	// different method for military time insertion
	dt->month = value % 12;
	//day
	value = -1;
	avr_wait(500);
	while((press = get_key()) != 4){
 6d6:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 6da:	8c 01       	movw	r16, r24
 6dc:	04 97       	sbiw	r24, 0x04	; 4
 6de:	09 f0       	breq	.+2      	; 0x6e2 <set_date+0x16a>
 6e0:	ba cf       	rjmp	.-140    	; 0x656 <set_date+0xde>
				lcd_puts2(buf);
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	dt->day = value; // day can never be wrong and will be recalc'd based on excess time
 6e2:	f7 01       	movw	r30, r14
 6e4:	d5 82       	std	Z+5, r13	; 0x05
 6e6:	c4 82       	std	Z+4, r12	; 0x04
	//year
	value = -1;
	avr_wait(500);
 6e8:	84 ef       	ldi	r24, 0xF4	; 244
 6ea:	91 e0       	ldi	r25, 0x01	; 1
 6ec:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	dt->day = value; // day can never be wrong and will be recalc'd based on excess time
	//year
	value = -1;
 6f0:	cc 24       	eor	r12, r12
 6f2:	ca 94       	dec	r12
 6f4:	dc 2c       	mov	r13, r12
	avr_wait(500);
	while((press = get_key()) != 4){
 6f6:	40 c0       	rjmp	.+128    	; 0x778 <set_date+0x200>
		if(press) { // some key is pressed
 6f8:	01 15       	cp	r16, r1
 6fa:	11 05       	cpc	r17, r1
 6fc:	e9 f1       	breq	.+122    	; 0x778 <set_date+0x200>
			if(is_number(press)) {
 6fe:	c8 01       	movw	r24, r16
 700:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <is_number>
 704:	89 2b       	or	r24, r25
 706:	a1 f1       	breq	.+104    	; 0x770 <set_date+0x1f8>
				con = convert(press);
 708:	c8 01       	movw	r24, r16
 70a:	0e 94 3d 08 	call	0x107a	; 0x107a <convert>
				if(value == -1) {
 70e:	ff ef       	ldi	r31, 0xFF	; 255
 710:	cf 16       	cp	r12, r31
 712:	df 06       	cpc	r13, r31
 714:	71 f0       	breq	.+28     	; 0x732 <set_date+0x1ba>
					value = con;
				}
				else {
					value = value * 10 + con;
 716:	96 01       	movw	r18, r12
 718:	22 0f       	add	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	cc 0c       	add	r12, r12
 71e:	dd 1c       	adc	r13, r13
 720:	cc 0c       	add	r12, r12
 722:	dd 1c       	adc	r13, r13
 724:	cc 0c       	add	r12, r12
 726:	dd 1c       	adc	r13, r13
 728:	c2 0e       	add	r12, r18
 72a:	d3 1e       	adc	r13, r19
 72c:	c8 0e       	add	r12, r24
 72e:	d9 1e       	adc	r13, r25
 730:	01 c0       	rjmp	.+2      	; 0x734 <set_date+0x1bc>
	while((press = get_key()) != 4){
		if(press) { // some key is pressed
			if(is_number(press)) {
				con = convert(press);
				if(value == -1) {
					value = con;
 732:	6c 01       	movw	r12, r24
				}
				else {
					value = value * 10 + con;
				}
				sprintf(buf,"Year: %04d", value);
 734:	df 92       	push	r13
 736:	cf 92       	push	r12
 738:	83 ee       	ldi	r24, 0xE3	; 227
 73a:	90 e0       	ldi	r25, 0x00	; 0
 73c:	a0 e0       	ldi	r26, 0x00	; 0
 73e:	af 93       	push	r26
 740:	9f 93       	push	r25
 742:	8f 93       	push	r24
 744:	8e 01       	movw	r16, r28
 746:	0f 5f       	subi	r16, 0xFF	; 255
 748:	1f 4f       	sbci	r17, 0xFF	; 255
 74a:	1f 93       	push	r17
 74c:	0f 93       	push	r16
 74e:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
				lcd_clr();
 752:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
				lcd_pos(0,0);
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
				lcd_puts2(buf);
 75e:	b8 01       	movw	r22, r16
 760:	80 e8       	ldi	r24, 0x80	; 128
 762:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
 766:	0f b6       	in	r0, 0x3f	; 63
 768:	f8 94       	cli
 76a:	de bf       	out	0x3e, r29	; 62
 76c:	0f be       	out	0x3f, r0	; 63
 76e:	cd bf       	out	0x3d, r28	; 61
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
 770:	88 ee       	ldi	r24, 0xE8	; 232
 772:	93 e0       	ldi	r25, 0x03	; 3
 774:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
	}
	dt->day = value; // day can never be wrong and will be recalc'd based on excess time
	//year
	value = -1;
	avr_wait(500);
	while((press = get_key()) != 4){
 778:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 77c:	8c 01       	movw	r16, r24
 77e:	04 97       	sbiw	r24, 0x04	; 4
 780:	09 f0       	breq	.+2      	; 0x784 <set_date+0x20c>
 782:	ba cf       	rjmp	.-140    	; 0x6f8 <set_date+0x180>
				lcd_puts2(buf);
			}
			avr_wait(1000); // avoid double pressing same button for entering value can also add screen flash here
		}
	}
	dt->year = value;
 784:	f7 01       	movw	r30, r14
 786:	d1 82       	std	Z+1, r13	; 0x01
 788:	c0 82       	st	Z, r12
	//recheck days based on year
	dt->day = dt->day % month_days(dt);
 78a:	04 81       	ldd	r16, Z+4	; 0x04
 78c:	15 81       	ldd	r17, Z+5	; 0x05
 78e:	b7 01       	movw	r22, r14
 790:	80 e8       	ldi	r24, 0x80	; 128
 792:	0e 94 8f 08 	call	0x111e	; 0x111e <month_days>
 796:	bc 01       	movw	r22, r24
 798:	c8 01       	movw	r24, r16
 79a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <__divmodhi4>
 79e:	f7 01       	movw	r30, r14
 7a0:	95 83       	std	Z+5, r25	; 0x05
 7a2:	84 83       	std	Z+4, r24	; 0x04
}
 7a4:	64 96       	adiw	r28, 0x14	; 20
 7a6:	0f b6       	in	r0, 0x3f	; 63
 7a8:	f8 94       	cli
 7aa:	de bf       	out	0x3e, r29	; 62
 7ac:	0f be       	out	0x3f, r0	; 63
 7ae:	cd bf       	out	0x3d, r28	; 61
 7b0:	df 91       	pop	r29
 7b2:	cf 91       	pop	r28
 7b4:	1f 91       	pop	r17
 7b6:	0f 91       	pop	r16
 7b8:	ff 90       	pop	r15
 7ba:	ef 90       	pop	r14
 7bc:	df 90       	pop	r13
 7be:	cf 90       	pop	r12
 7c0:	08 95       	ret

Disassembly of section .text.print_dt:

00000dc0 <print_dt>:
		default: 
			return 0;
	}
}

void print_dt(const struct dt *dt) {
 dc0:	cf 92       	push	r12
 dc2:	df 92       	push	r13
 dc4:	ef 92       	push	r14
 dc6:	0f 93       	push	r16
 dc8:	1f 93       	push	r17
 dca:	cf 93       	push	r28
 dcc:	df 93       	push	r29
 dce:	cd b7       	in	r28, 0x3d	; 61
 dd0:	de b7       	in	r29, 0x3e	; 62
 dd2:	61 97       	sbiw	r28, 0x11	; 17
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	6b 01       	movw	r12, r22
 de0:	e8 2e       	mov	r14, r24
	char buf[17];
	lcd_pos(0,0);
 de2:	60 e0       	ldi	r22, 0x00	; 0
 de4:	80 e0       	ldi	r24, 0x00	; 0
 de6:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
	sprintf(buf,"%02d/%02d/%04d ",dt->month,dt->day,dt->year);
 dea:	f6 01       	movw	r30, r12
 dec:	5e 2d       	mov	r21, r14
 dee:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 df2:	7f 93       	push	r23
 df4:	6f 93       	push	r22
 df6:	ae 2d       	mov	r26, r14
 df8:	c6 01       	movw	r24, r12
 dfa:	04 96       	adiw	r24, 0x04	; 4
 dfc:	a1 1d       	adc	r26, r1
 dfe:	fc 01       	movw	r30, r24
 e00:	5a 2f       	mov	r21, r26
 e02:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 e06:	7f 93       	push	r23
 e08:	6f 93       	push	r22
 e0a:	82 e0       	ldi	r24, 0x02	; 2
 e0c:	c8 0e       	add	r12, r24
 e0e:	d1 1c       	adc	r13, r1
 e10:	e1 1c       	adc	r14, r1
 e12:	f6 01       	movw	r30, r12
 e14:	5e 2d       	mov	r21, r14
 e16:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 e1a:	7f 93       	push	r23
 e1c:	6f 93       	push	r22
 e1e:	8e ee       	ldi	r24, 0xEE	; 238
 e20:	90 e0       	ldi	r25, 0x00	; 0
 e22:	a0 e0       	ldi	r26, 0x00	; 0
 e24:	af 93       	push	r26
 e26:	9f 93       	push	r25
 e28:	8f 93       	push	r24
 e2a:	8e 01       	movw	r16, r28
 e2c:	0f 5f       	subi	r16, 0xFF	; 255
 e2e:	1f 4f       	sbci	r17, 0xFF	; 255
 e30:	1f 93       	push	r17
 e32:	0f 93       	push	r16
 e34:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
	lcd_puts2(buf);
 e38:	b8 01       	movw	r22, r16
 e3a:	80 e8       	ldi	r24, 0x80	; 128
 e3c:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
}
 e40:	0f b6       	in	r0, 0x3f	; 63
 e42:	f8 94       	cli
 e44:	de bf       	out	0x3e, r29	; 62
 e46:	0f be       	out	0x3f, r0	; 63
 e48:	cd bf       	out	0x3d, r28	; 61
 e4a:	61 96       	adiw	r28, 0x11	; 17
 e4c:	0f b6       	in	r0, 0x3f	; 63
 e4e:	f8 94       	cli
 e50:	de bf       	out	0x3e, r29	; 62
 e52:	0f be       	out	0x3f, r0	; 63
 e54:	cd bf       	out	0x3d, r28	; 61
 e56:	df 91       	pop	r29
 e58:	cf 91       	pop	r28
 e5a:	1f 91       	pop	r17
 e5c:	0f 91       	pop	r16
 e5e:	ef 90       	pop	r14
 e60:	df 90       	pop	r13
 e62:	cf 90       	pop	r12
 e64:	08 95       	ret

Disassembly of section .text.calc_mili_time:

00000fc0 <calc_mili_time>:
		sprintf(buf, "%04d : %02d ", military, dt->second);
	}
	lcd_puts2(buf);
}

int calc_mili_time(const struct dt *dt) {
     fc0:	cf 93       	push	r28
     fc2:	df 93       	push	r29
     fc4:	9b 01       	movw	r18, r22
     fc6:	48 2f       	mov	r20, r24
	int temp;
	if(dt->aorp)
     fc8:	a8 2f       	mov	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	0e 96       	adiw	r24, 0x0e	; 14
     fce:	a1 1d       	adc	r26, r1
     fd0:	fc 01       	movw	r30, r24
     fd2:	5a 2f       	mov	r21, r26
     fd4:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
     fd8:	67 2b       	or	r22, r23
     fda:	19 f0       	breq	.+6      	; 0xfe2 <calc_mili_time+0x22>
		temp = 12;
     fdc:	cc e0       	ldi	r28, 0x0C	; 12
     fde:	d0 e0       	ldi	r29, 0x00	; 0
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <calc_mili_time+0x26>
	else
		temp = 0;
     fe2:	c0 e0       	ldi	r28, 0x00	; 0
     fe4:	d0 e0       	ldi	r29, 0x00	; 0
	return ((dt->hour + temp) * 100 + dt->minute);
     fe6:	a4 2f       	mov	r26, r20
     fe8:	c9 01       	movw	r24, r18
     fea:	06 96       	adiw	r24, 0x06	; 6
     fec:	a1 1d       	adc	r26, r1
     fee:	fc 01       	movw	r30, r24
     ff0:	5a 2f       	mov	r21, r26
     ff2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
     ff6:	6c 0f       	add	r22, r28
     ff8:	7d 1f       	adc	r23, r29
     ffa:	54 e6       	ldi	r21, 0x64	; 100
     ffc:	56 9f       	mul	r21, r22
     ffe:	c0 01       	movw	r24, r0
    1000:	57 9f       	mul	r21, r23
    1002:	90 0d       	add	r25, r0
    1004:	11 24       	eor	r1, r1
    1006:	28 5f       	subi	r18, 0xF8	; 248
    1008:	3f 4f       	sbci	r19, 0xFF	; 255
    100a:	4f 4f       	sbci	r20, 0xFF	; 255
    100c:	f9 01       	movw	r30, r18
    100e:	54 2f       	mov	r21, r20
    1010:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
}
    1014:	86 0f       	add	r24, r22
    1016:	97 1f       	adc	r25, r23
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	08 95       	ret

Disassembly of section .text.print_time:

00000a06 <print_time>:
	lcd_pos(0,0);
	sprintf(buf,"%02d/%02d/%04d ",dt->month,dt->day,dt->year);
	lcd_puts2(buf);
}

void print_time(const struct dt *dt) {
 a06:	cf 92       	push	r12
 a08:	df 92       	push	r13
 a0a:	ef 92       	push	r14
 a0c:	cf 93       	push	r28
 a0e:	df 93       	push	r29
 a10:	cd b7       	in	r28, 0x3d	; 61
 a12:	de b7       	in	r29, 0x3e	; 62
 a14:	61 97       	sbiw	r28, 0x11	; 17
 a16:	0f b6       	in	r0, 0x3f	; 63
 a18:	f8 94       	cli
 a1a:	de bf       	out	0x3e, r29	; 62
 a1c:	0f be       	out	0x3f, r0	; 63
 a1e:	cd bf       	out	0x3d, r28	; 61
 a20:	6b 01       	movw	r12, r22
 a22:	e8 2e       	mov	r14, r24
	char buf[17];
	lcd_pos(1,0);
 a24:	60 e0       	ldi	r22, 0x00	; 0
 a26:	81 e0       	ldi	r24, 0x01	; 1
 a28:	0e 94 d3 09 	call	0x13a6	; 0x13a6 <lcd_pos>
	if(!dt->type) {
 a2c:	ae 2d       	mov	r26, r14
 a2e:	c6 01       	movw	r24, r12
 a30:	0c 96       	adiw	r24, 0x0c	; 12
 a32:	a1 1d       	adc	r26, r1
 a34:	fc 01       	movw	r30, r24
 a36:	5a 2f       	mov	r21, r26
 a38:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 a3c:	67 2b       	or	r22, r23
 a3e:	09 f0       	breq	.+2      	; 0xa42 <print_time+0x3c>
 a40:	6a c0       	rjmp	.+212    	; 0xb16 <print_time+0x110>
		if(!dt->aorp)
 a42:	ae 2d       	mov	r26, r14
 a44:	c6 01       	movw	r24, r12
 a46:	0e 96       	adiw	r24, 0x0e	; 14
 a48:	a1 1d       	adc	r26, r1
 a4a:	fc 01       	movw	r30, r24
 a4c:	5a 2f       	mov	r21, r26
 a4e:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 a52:	67 2b       	or	r22, r23
 a54:	81 f5       	brne	.+96     	; 0xab6 <print_time+0xb0>
			sprintf(buf, "%02d:%02d:%02d AM", dt->hour, dt->minute, dt->second);
 a56:	ae 2d       	mov	r26, r14
 a58:	c6 01       	movw	r24, r12
 a5a:	0a 96       	adiw	r24, 0x0a	; 10
 a5c:	a1 1d       	adc	r26, r1
 a5e:	fc 01       	movw	r30, r24
 a60:	5a 2f       	mov	r21, r26
 a62:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 a66:	7f 93       	push	r23
 a68:	6f 93       	push	r22
 a6a:	ae 2d       	mov	r26, r14
 a6c:	c6 01       	movw	r24, r12
 a6e:	08 96       	adiw	r24, 0x08	; 8
 a70:	a1 1d       	adc	r26, r1
 a72:	fc 01       	movw	r30, r24
 a74:	5a 2f       	mov	r21, r26
 a76:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 a7a:	7f 93       	push	r23
 a7c:	6f 93       	push	r22
 a7e:	26 e0       	ldi	r18, 0x06	; 6
 a80:	c2 0e       	add	r12, r18
 a82:	d1 1c       	adc	r13, r1
 a84:	e1 1c       	adc	r14, r1
 a86:	f6 01       	movw	r30, r12
 a88:	5e 2d       	mov	r21, r14
 a8a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 a8e:	7f 93       	push	r23
 a90:	6f 93       	push	r22
 a92:	8e ef       	ldi	r24, 0xFE	; 254
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	a0 e0       	ldi	r26, 0x00	; 0
 a98:	af 93       	push	r26
 a9a:	9f 93       	push	r25
 a9c:	8f 93       	push	r24
 a9e:	ce 01       	movw	r24, r28
 aa0:	01 96       	adiw	r24, 0x01	; 1
 aa2:	9f 93       	push	r25
 aa4:	8f 93       	push	r24
 aa6:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	51 c0       	rjmp	.+162    	; 0xb58 <print_time+0x152>
		else
			sprintf(buf, "%02d:%02d:%02d PM", dt->hour, dt->minute, dt->second);
 ab6:	ae 2d       	mov	r26, r14
 ab8:	c6 01       	movw	r24, r12
 aba:	0a 96       	adiw	r24, 0x0a	; 10
 abc:	a1 1d       	adc	r26, r1
 abe:	fc 01       	movw	r30, r24
 ac0:	5a 2f       	mov	r21, r26
 ac2:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 ac6:	7f 93       	push	r23
 ac8:	6f 93       	push	r22
 aca:	ae 2d       	mov	r26, r14
 acc:	c6 01       	movw	r24, r12
 ace:	08 96       	adiw	r24, 0x08	; 8
 ad0:	a1 1d       	adc	r26, r1
 ad2:	fc 01       	movw	r30, r24
 ad4:	5a 2f       	mov	r21, r26
 ad6:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 ada:	7f 93       	push	r23
 adc:	6f 93       	push	r22
 ade:	96 e0       	ldi	r25, 0x06	; 6
 ae0:	c9 0e       	add	r12, r25
 ae2:	d1 1c       	adc	r13, r1
 ae4:	e1 1c       	adc	r14, r1
 ae6:	f6 01       	movw	r30, r12
 ae8:	5e 2d       	mov	r21, r14
 aea:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 aee:	7f 93       	push	r23
 af0:	6f 93       	push	r22
 af2:	80 e1       	ldi	r24, 0x10	; 16
 af4:	91 e0       	ldi	r25, 0x01	; 1
 af6:	a0 e0       	ldi	r26, 0x00	; 0
 af8:	af 93       	push	r26
 afa:	9f 93       	push	r25
 afc:	8f 93       	push	r24
 afe:	ce 01       	movw	r24, r28
 b00:	01 96       	adiw	r24, 0x01	; 1
 b02:	9f 93       	push	r25
 b04:	8f 93       	push	r24
 b06:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
 b0a:	0f b6       	in	r0, 0x3f	; 63
 b0c:	f8 94       	cli
 b0e:	de bf       	out	0x3e, r29	; 62
 b10:	0f be       	out	0x3f, r0	; 63
 b12:	cd bf       	out	0x3d, r28	; 61
 b14:	21 c0       	rjmp	.+66     	; 0xb58 <print_time+0x152>
	}
	else{
		int military = calc_mili_time(dt);
 b16:	8e 2d       	mov	r24, r14
 b18:	b6 01       	movw	r22, r12
 b1a:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <calc_mili_time>
		sprintf(buf, "%04d : %02d ", military, dt->second);
 b1e:	2a e0       	ldi	r18, 0x0A	; 10
 b20:	c2 0e       	add	r12, r18
 b22:	d1 1c       	adc	r13, r1
 b24:	e1 1c       	adc	r14, r1
 b26:	f6 01       	movw	r30, r12
 b28:	5e 2d       	mov	r21, r14
 b2a:	0e 94 77 0a 	call	0x14ee	; 0x14ee <__xload_2>
 b2e:	7f 93       	push	r23
 b30:	6f 93       	push	r22
 b32:	9f 93       	push	r25
 b34:	8f 93       	push	r24
 b36:	82 e2       	ldi	r24, 0x22	; 34
 b38:	91 e0       	ldi	r25, 0x01	; 1
 b3a:	a0 e0       	ldi	r26, 0x00	; 0
 b3c:	af 93       	push	r26
 b3e:	9f 93       	push	r25
 b40:	8f 93       	push	r24
 b42:	ce 01       	movw	r24, r28
 b44:	01 96       	adiw	r24, 0x01	; 1
 b46:	9f 93       	push	r25
 b48:	8f 93       	push	r24
 b4a:	0e 94 b7 08 	call	0x116e	; 0x116e <sprintf>
 b4e:	0f b6       	in	r0, 0x3f	; 63
 b50:	f8 94       	cli
 b52:	de bf       	out	0x3e, r29	; 62
 b54:	0f be       	out	0x3f, r0	; 63
 b56:	cd bf       	out	0x3d, r28	; 61
	}
	lcd_puts2(buf);
 b58:	be 01       	movw	r22, r28
 b5a:	6f 5f       	subi	r22, 0xFF	; 255
 b5c:	7f 4f       	sbci	r23, 0xFF	; 255
 b5e:	80 e8       	ldi	r24, 0x80	; 128
 b60:	0e 94 36 09 	call	0x126c	; 0x126c <lcd_puts2>
}
 b64:	61 96       	adiw	r28, 0x11	; 17
 b66:	0f b6       	in	r0, 0x3f	; 63
 b68:	f8 94       	cli
 b6a:	de bf       	out	0x3e, r29	; 62
 b6c:	0f be       	out	0x3f, r0	; 63
 b6e:	cd bf       	out	0x3d, r28	; 61
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	ef 90       	pop	r14
 b76:	df 90       	pop	r13
 b78:	cf 90       	pop	r12
 b7a:	08 95       	ret

Disassembly of section .text.switch_time:

000014c6 <switch_time>:
		temp = 0;
	return ((dt->hour + temp) * 100 + dt->minute);
}

void switch_time(struct dt *dt) {
	dt->type = 1 - dt->type;
    14c6:	fc 01       	movw	r30, r24
    14c8:	44 85       	ldd	r20, Z+12	; 0x0c
    14ca:	55 85       	ldd	r21, Z+13	; 0x0d
    14cc:	21 e0       	ldi	r18, 0x01	; 1
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	24 1b       	sub	r18, r20
    14d2:	35 0b       	sbc	r19, r21
    14d4:	35 87       	std	Z+13, r19	; 0x0d
    14d6:	24 87       	std	Z+12, r18	; 0x0c
    14d8:	08 95       	ret

Disassembly of section .text.switch_ampm:

000014da <switch_ampm>:
}

void switch_ampm(struct dt *dt) {
	dt->aorp = 1 - dt->aorp;
    14da:	fc 01       	movw	r30, r24
    14dc:	46 85       	ldd	r20, Z+14	; 0x0e
    14de:	57 85       	ldd	r21, Z+15	; 0x0f
    14e0:	21 e0       	ldi	r18, 0x01	; 1
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	24 1b       	sub	r18, r20
    14e6:	35 0b       	sbc	r19, r21
    14e8:	37 87       	std	Z+15, r19	; 0x0f
    14ea:	26 87       	std	Z+14, r18	; 0x0e
    14ec:	08 95       	ret

Disassembly of section .text.test_newyears:

000011f4 <test_newyears>:
}

void test_newyears(struct dt *dt) {
    11f4:	fc 01       	movw	r30, r24
	dt->month = 12;
    11f6:	8c e0       	ldi	r24, 0x0C	; 12
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	93 83       	std	Z+3, r25	; 0x03
    11fc:	82 83       	std	Z+2, r24	; 0x02
	dt->day = 31;
    11fe:	8f e1       	ldi	r24, 0x1F	; 31
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	95 83       	std	Z+5, r25	; 0x05
    1204:	84 83       	std	Z+4, r24	; 0x04
	dt->year = 2021;
    1206:	85 ee       	ldi	r24, 0xE5	; 229
    1208:	97 e0       	ldi	r25, 0x07	; 7
    120a:	91 83       	std	Z+1, r25	; 0x01
    120c:	80 83       	st	Z, r24
	dt->hour = 11;
    120e:	8b e0       	ldi	r24, 0x0B	; 11
    1210:	90 e0       	ldi	r25, 0x00	; 0
    1212:	97 83       	std	Z+7, r25	; 0x07
    1214:	86 83       	std	Z+6, r24	; 0x06
	dt->minute = 59;
    1216:	8b e3       	ldi	r24, 0x3B	; 59
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	91 87       	std	Z+9, r25	; 0x09
    121c:	80 87       	std	Z+8, r24	; 0x08
	dt->second = 55;
    121e:	87 e3       	ldi	r24, 0x37	; 55
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	93 87       	std	Z+11, r25	; 0x0b
    1224:	82 87       	std	Z+10, r24	; 0x0a
	dt->type = 0;
    1226:	15 86       	std	Z+13, r1	; 0x0d
    1228:	14 86       	std	Z+12, r1	; 0x0c
	dt->aorp = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	97 87       	std	Z+15, r25	; 0x0f
    1230:	86 87       	std	Z+14, r24	; 0x0e
    1232:	08 95       	ret

Disassembly of section .text.main:

00000d06 <main>:
void set_time(struct dt *dt); 
void set_date(struct dt *dt);


int main(void)
{
 d06:	cf 93       	push	r28
 d08:	df 93       	push	r29
 d0a:	cd b7       	in	r28, 0x3d	; 61
 d0c:	de b7       	in	r29, 0x3e	; 62
 d0e:	60 97       	sbiw	r28, 0x10	; 16
 d10:	0f b6       	in	r0, 0x3f	; 63
 d12:	f8 94       	cli
 d14:	de bf       	out	0x3e, r29	; 62
 d16:	0f be       	out	0x3f, r0	; 63
 d18:	cd bf       	out	0x3d, r28	; 61
	
	avr_init();
 d1a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <avr_init>
	lcd_init();
 d1e:	0e 94 0f 08 	call	0x101e	; 0x101e <lcd_init>
	struct dt myDT;
	init_dt(&myDT);
 d22:	8e 01       	movw	r16, r28
 d24:	0f 5f       	subi	r16, 0xFF	; 255
 d26:	1f 4f       	sbci	r17, 0xFF	; 255
 d28:	c8 01       	movw	r24, r16
 d2a:	0e 94 01 0a 	call	0x1402	; 0x1402 <init_dt>
	print_dt(&myDT);
 d2e:	c8 01       	movw	r24, r16
 d30:	a0 e8       	ldi	r26, 0x80	; 128
 d32:	d0 2e       	mov	r13, r16
 d34:	e9 2e       	mov	r14, r25
 d36:	fa 2e       	mov	r15, r26
 d38:	bc 01       	movw	r22, r24
 d3a:	8a 2f       	mov	r24, r26
 d3c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <print_dt>
	int test_ny = 1, test_leap = 0;
	//testing function change to 1 to test/*
	if(test_ny) {
		test_newyears(&myDT);
 d40:	c8 01       	movw	r24, r16
 d42:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <test_newyears>
		Setting functionality:
			Pressing A will insert whatever value is currently pressed into the dt structure going month day year hour minute second AM/PM each needing an A press and ampm needing 1 or 2 selected
			Pressing A with no other buttons having been pressed will keep previous value 
			Otherwise press numbers on keypad slowly till all numbers have been inputted.
		*/
		lcd_clr();
 d46:	0e 94 85 0a 	call	0x150a	; 0x150a <lcd_clr>
		print_dt(&myDT);
 d4a:	6d 2d       	mov	r22, r13
 d4c:	7e 2d       	mov	r23, r14
 d4e:	8f 2d       	mov	r24, r15
 d50:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <print_dt>
		print_time(&myDT);
 d54:	6d 2d       	mov	r22, r13
 d56:	7e 2d       	mov	r23, r14
 d58:	8f 2d       	mov	r24, r15
 d5a:	0e 94 03 05 	call	0xa06	; 0xa06 <print_time>
		int press = get_key();
 d5e:	0e 94 67 08 	call	0x10ce	; 0x10ce <get_key>
 d62:	8c 01       	movw	r16, r24
		if(press) { // key pressed
 d64:	00 97       	sbiw	r24, 0x00	; 0
 d66:	19 f1       	breq	.+70     	; 0xdae <main+0xa8>
			if(press == 4) { // set time/date operation
 d68:	04 97       	sbiw	r24, 0x04	; 4
 d6a:	61 f4       	brne	.+24     	; 0xd84 <main+0x7e>
				set_date(&myDT);
 d6c:	ce 01       	movw	r24, r28
 d6e:	01 96       	adiw	r24, 0x01	; 1
 d70:	0e 94 bc 02 	call	0x578	; 0x578 <set_date>
				set_time(&myDT);
 d74:	ce 01       	movw	r24, r28
 d76:	01 96       	adiw	r24, 0x01	; 1
 d78:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <set_time>
				set_ampm(&myDT);
 d7c:	ce 01       	movw	r24, r28
 d7e:	01 96       	adiw	r24, 0x01	; 1
 d80:	0e 94 33 07 	call	0xe66	; 0xe66 <set_ampm>
			}
			if(press == 8) { // switch between military and am/pm
 d84:	08 30       	cpi	r16, 0x08	; 8
 d86:	11 05       	cpc	r17, r1
 d88:	21 f4       	brne	.+8      	; 0xd92 <main+0x8c>
				switch_time(&myDT);
 d8a:	ce 01       	movw	r24, r28
 d8c:	01 96       	adiw	r24, 0x01	; 1
 d8e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <switch_time>
			}
			if(press == 12) {
 d92:	0c 30       	cpi	r16, 0x0C	; 12
 d94:	11 05       	cpc	r17, r1
 d96:	21 f4       	brne	.+8      	; 0xda0 <main+0x9a>
				switch_ampm(&myDT);
 d98:	ce 01       	movw	r24, r28
 d9a:	01 96       	adiw	r24, 0x01	; 1
 d9c:	0e 94 6d 0a 	call	0x14da	; 0x14da <switch_ampm>
			}
			if(press == 16) {
 da0:	00 31       	cpi	r16, 0x10	; 16
 da2:	11 05       	cpc	r17, r1
 da4:	21 f4       	brne	.+8      	; 0xdae <main+0xa8>
				init_dt(&myDT);
 da6:	ce 01       	movw	r24, r28
 da8:	01 96       	adiw	r24, 0x01	; 1
 daa:	0e 94 01 0a 	call	0x1402	; 0x1402 <init_dt>
			}
		}
		avr_wait(840);
 dae:	88 e4       	ldi	r24, 0x48	; 72
 db0:	93 e0       	ldi	r25, 0x03	; 3
 db2:	0e 94 17 0a 	call	0x142e	; 0x142e <avr_wait>
		advance_dt(&myDT);
 db6:	ce 01       	movw	r24, r28
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	0e 94 be 05 	call	0xb7c	; 0xb7c <advance_dt>
    }
 dbe:	c3 cf       	rjmp	.-122    	; 0xd46 <main+0x40>

Disassembly of section .text.libgcc.div:

00001456 <__divmodhi4>:
    1456:	97 fb       	bst	r25, 7
    1458:	07 2e       	mov	r0, r23
    145a:	16 f4       	brtc	.+4      	; 0x1460 <__divmodhi4+0xa>
    145c:	00 94       	com	r0
    145e:	07 d0       	rcall	.+14     	; 0x146e <__divmodhi4_neg1>
    1460:	77 fd       	sbrc	r23, 7
    1462:	09 d0       	rcall	.+18     	; 0x1476 <__divmodhi4_neg2>
    1464:	0e 94 3f 0a 	call	0x147e	; 0x147e <__udivmodhi4>
    1468:	07 fc       	sbrc	r0, 7
    146a:	05 d0       	rcall	.+10     	; 0x1476 <__divmodhi4_neg2>
    146c:	3e f4       	brtc	.+14     	; 0x147c <__divmodhi4_exit>

0000146e <__divmodhi4_neg1>:
    146e:	90 95       	com	r25
    1470:	81 95       	neg	r24
    1472:	9f 4f       	sbci	r25, 0xFF	; 255
    1474:	08 95       	ret

00001476 <__divmodhi4_neg2>:
    1476:	70 95       	com	r23
    1478:	61 95       	neg	r22
    147a:	7f 4f       	sbci	r23, 0xFF	; 255

0000147c <__divmodhi4_exit>:
    147c:	08 95       	ret

Disassembly of section .text.libgcc:

000014fe <__tablejump2__>:
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	05 90       	lpm	r0, Z+
    1504:	f4 91       	lpm	r31, Z
    1506:	e0 2d       	mov	r30, r0
    1508:	09 94       	ijmp

Disassembly of section .text.libgcc:

000014ee <__xload_2>:
    14ee:	57 fd       	sbrc	r21, 7
    14f0:	03 c0       	rjmp	.+6      	; 0x14f8 <__xload_2+0xa>
    14f2:	65 91       	lpm	r22, Z+
    14f4:	75 91       	lpm	r23, Z+
    14f6:	08 95       	ret
    14f8:	61 91       	ld	r22, Z+
    14fa:	71 91       	ld	r23, Z+
    14fc:	08 95       	ret

Disassembly of section .text.libgcc.div:

0000147e <__udivmodhi4>:
    147e:	aa 1b       	sub	r26, r26
    1480:	bb 1b       	sub	r27, r27
    1482:	51 e1       	ldi	r21, 0x11	; 17
    1484:	07 c0       	rjmp	.+14     	; 0x1494 <__udivmodhi4_ep>

00001486 <__udivmodhi4_loop>:
    1486:	aa 1f       	adc	r26, r26
    1488:	bb 1f       	adc	r27, r27
    148a:	a6 17       	cp	r26, r22
    148c:	b7 07       	cpc	r27, r23
    148e:	10 f0       	brcs	.+4      	; 0x1494 <__udivmodhi4_ep>
    1490:	a6 1b       	sub	r26, r22
    1492:	b7 0b       	sbc	r27, r23

00001494 <__udivmodhi4_ep>:
    1494:	88 1f       	adc	r24, r24
    1496:	99 1f       	adc	r25, r25
    1498:	5a 95       	dec	r21
    149a:	a9 f7       	brne	.-22     	; 0x1486 <__udivmodhi4_loop>
    149c:	80 95       	com	r24
    149e:	90 95       	com	r25
    14a0:	bc 01       	movw	r22, r24
    14a2:	cd 01       	movw	r24, r26
    14a4:	08 95       	ret

Disassembly of section .text.avrlibc:

00001374 <memcpy>:
    1374:	cf 92       	push	r12
    1376:	df 92       	push	r13
    1378:	ef 92       	push	r14
    137a:	dc 01       	movw	r26, r24
    137c:	6a 01       	movw	r12, r20
    137e:	e6 2e       	mov	r14, r22
    1380:	28 0f       	add	r18, r24
    1382:	39 1f       	adc	r19, r25
    1384:	a2 17       	cp	r26, r18
    1386:	b3 07       	cpc	r27, r19
    1388:	51 f0       	breq	.+20     	; 0x139e <memcpy+0x2a>
    138a:	f6 01       	movw	r30, r12
    138c:	44 91       	lpm	r20, Z
    138e:	e7 fc       	sbrc	r14, 7
    1390:	40 81       	ld	r20, Z
    1392:	4d 93       	st	X+, r20
    1394:	4f ef       	ldi	r20, 0xFF	; 255
    1396:	c4 1a       	sub	r12, r20
    1398:	d4 0a       	sbc	r13, r20
    139a:	e4 0a       	sbc	r14, r20
    139c:	f3 cf       	rjmp	.-26     	; 0x1384 <memcpy+0x10>
    139e:	ef 90       	pop	r14
    13a0:	df 90       	pop	r13
    13a2:	cf 90       	pop	r12
    13a4:	08 95       	ret

Disassembly of section .text.avrlibc:

0000116e <sprintf>:
    116e:	af e0       	ldi	r26, 0x0F	; 15
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	ed eb       	ldi	r30, 0xBD	; 189
    1174:	f8 e0       	ldi	r31, 0x08	; 8
    1176:	0c 94 28 09 	jmp	0x1250	; 0x1250 <__prologue_saves__+0x1c>
    117a:	0e 89       	ldd	r16, Y+22	; 0x16
    117c:	1f 89       	ldd	r17, Y+23	; 0x17
    117e:	86 e0       	ldi	r24, 0x06	; 6
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	1a 83       	std	Y+2, r17	; 0x02
    1184:	09 83       	std	Y+1, r16	; 0x01
    1186:	8f ef       	ldi	r24, 0xFF	; 255
    1188:	9f e7       	ldi	r25, 0x7F	; 127
    118a:	9f 83       	std	Y+7, r25	; 0x07
    118c:	8e 83       	std	Y+6, r24	; 0x06
    118e:	9e 01       	movw	r18, r28
    1190:	25 5e       	subi	r18, 0xE5	; 229
    1192:	3f 4f       	sbci	r19, 0xFF	; 255
    1194:	48 8d       	ldd	r20, Y+24	; 0x18
    1196:	59 8d       	ldd	r21, Y+25	; 0x19
    1198:	6a 8d       	ldd	r22, Y+26	; 0x1a
    119a:	ce 01       	movw	r24, r28
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	0e 94 98 00 	call	0x130	; 0x130 <vfprintf>
    11a2:	e8 85       	ldd	r30, Y+8	; 0x08
    11a4:	f9 85       	ldd	r31, Y+9	; 0x09
    11a6:	e0 0f       	add	r30, r16
    11a8:	f1 1f       	adc	r31, r17
    11aa:	10 82       	st	Z, r1
    11ac:	2f 96       	adiw	r28, 0x0f	; 15
    11ae:	e4 e0       	ldi	r30, 0x04	; 4
    11b0:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__epilogue_restores__+0x1c>

Disassembly of section .text.avrlibc:

00000130 <vfprintf>:
 130:	2f 92       	push	r2
 132:	3f 92       	push	r3
 134:	4f 92       	push	r4
 136:	6f 92       	push	r6
 138:	7f 92       	push	r7
 13a:	8f 92       	push	r8
 13c:	9f 92       	push	r9
 13e:	af 92       	push	r10
 140:	bf 92       	push	r11
 142:	cf 92       	push	r12
 144:	df 92       	push	r13
 146:	ef 92       	push	r14
 148:	ff 92       	push	r15
 14a:	0f 93       	push	r16
 14c:	1f 93       	push	r17
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
 152:	cd b7       	in	r28, 0x3d	; 61
 154:	de b7       	in	r29, 0x3e	; 62
 156:	62 97       	sbiw	r28, 0x12	; 18
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	de bf       	out	0x3e, r29	; 62
 15e:	0f be       	out	0x3f, r0	; 63
 160:	cd bf       	out	0x3d, r28	; 61
 162:	6c 01       	movw	r12, r24
 164:	3a 01       	movw	r6, r20
 166:	86 2e       	mov	r8, r22
 168:	79 01       	movw	r14, r18
 16a:	fc 01       	movw	r30, r24
 16c:	10 86       	std	Z+8, r1	; 0x08
 16e:	17 82       	std	Z+7, r1	; 0x07
 170:	84 81       	ldd	r24, Z+4	; 0x04
 172:	81 ff       	sbrs	r24, 1
 174:	e7 c1       	rjmp	.+974    	; 0x544 <__EEPROM_REGION_LENGTH__+0x144>
 176:	9e 01       	movw	r18, r28
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	3f 4f       	sbci	r19, 0xFF	; 255
 17c:	3d 87       	std	Y+13, r19	; 0x0d
 17e:	2c 87       	std	Y+12, r18	; 0x0c
 180:	c9 01       	movw	r24, r18
 182:	a0 e8       	ldi	r26, 0x80	; 128
 184:	88 8b       	std	Y+16, r24	; 0x10
 186:	99 8b       	std	Y+17, r25	; 0x11
 188:	aa 8b       	std	Y+18, r26	; 0x12
 18a:	9f e3       	ldi	r25, 0x3F	; 63
 18c:	99 2e       	mov	r9, r25
 18e:	f3 01       	movw	r30, r6
 190:	84 91       	lpm	r24, Z
 192:	87 fc       	sbrc	r8, 7
 194:	80 81       	ld	r24, Z
 196:	88 23       	and	r24, r24
 198:	09 f4       	brne	.+2      	; 0x19c <vfprintf+0x6c>
 19a:	d0 c1       	rjmp	.+928    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 19c:	48 2d       	mov	r20, r8
 19e:	93 01       	movw	r18, r6
 1a0:	2f 5f       	subi	r18, 0xFF	; 255
 1a2:	3f 4f       	sbci	r19, 0xFF	; 255
 1a4:	4f 4f       	sbci	r20, 0xFF	; 255
 1a6:	85 32       	cpi	r24, 0x25	; 37
 1a8:	19 f0       	breq	.+6      	; 0x1b0 <vfprintf+0x80>
 1aa:	39 01       	movw	r6, r18
 1ac:	84 2e       	mov	r8, r20
 1ae:	0a c0       	rjmp	.+20     	; 0x1c4 <vfprintf+0x94>
 1b0:	f9 01       	movw	r30, r18
 1b2:	84 91       	lpm	r24, Z
 1b4:	47 fd       	sbrc	r20, 7
 1b6:	80 81       	ld	r24, Z
 1b8:	92 e0       	ldi	r25, 0x02	; 2
 1ba:	69 0e       	add	r6, r25
 1bc:	71 1c       	adc	r7, r1
 1be:	81 1c       	adc	r8, r1
 1c0:	85 32       	cpi	r24, 0x25	; 37
 1c2:	29 f4       	brne	.+10     	; 0x1ce <vfprintf+0x9e>
 1c4:	b6 01       	movw	r22, r12
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 1cc:	e0 cf       	rjmp	.-64     	; 0x18e <vfprintf+0x5e>
 1ce:	b1 2c       	mov	r11, r1
 1d0:	00 e0       	ldi	r16, 0x00	; 0
 1d2:	10 e0       	ldi	r17, 0x00	; 0
 1d4:	10 32       	cpi	r17, 0x20	; 32
 1d6:	a0 f4       	brcc	.+40     	; 0x200 <vfprintf+0xd0>
 1d8:	8b 32       	cpi	r24, 0x2B	; 43
 1da:	69 f0       	breq	.+26     	; 0x1f6 <vfprintf+0xc6>
 1dc:	30 f4       	brcc	.+12     	; 0x1ea <vfprintf+0xba>
 1de:	80 32       	cpi	r24, 0x20	; 32
 1e0:	59 f0       	breq	.+22     	; 0x1f8 <vfprintf+0xc8>
 1e2:	83 32       	cpi	r24, 0x23	; 35
 1e4:	69 f4       	brne	.+26     	; 0x200 <vfprintf+0xd0>
 1e6:	10 61       	ori	r17, 0x10	; 16
 1e8:	2c c0       	rjmp	.+88     	; 0x242 <vfprintf+0x112>
 1ea:	8d 32       	cpi	r24, 0x2D	; 45
 1ec:	39 f0       	breq	.+14     	; 0x1fc <vfprintf+0xcc>
 1ee:	80 33       	cpi	r24, 0x30	; 48
 1f0:	39 f4       	brne	.+14     	; 0x200 <vfprintf+0xd0>
 1f2:	11 60       	ori	r17, 0x01	; 1
 1f4:	26 c0       	rjmp	.+76     	; 0x242 <vfprintf+0x112>
 1f6:	12 60       	ori	r17, 0x02	; 2
 1f8:	14 60       	ori	r17, 0x04	; 4
 1fa:	23 c0       	rjmp	.+70     	; 0x242 <vfprintf+0x112>
 1fc:	18 60       	ori	r17, 0x08	; 8
 1fe:	21 c0       	rjmp	.+66     	; 0x242 <vfprintf+0x112>
 200:	17 fd       	sbrc	r17, 7
 202:	29 c0       	rjmp	.+82     	; 0x256 <vfprintf+0x126>
 204:	90 ed       	ldi	r25, 0xD0	; 208
 206:	98 0f       	add	r25, r24
 208:	9a 30       	cpi	r25, 0x0A	; 10
 20a:	78 f4       	brcc	.+30     	; 0x22a <vfprintf+0xfa>
 20c:	16 ff       	sbrs	r17, 6
 20e:	06 c0       	rjmp	.+12     	; 0x21c <vfprintf+0xec>
 210:	aa e0       	ldi	r26, 0x0A	; 10
 212:	ba 9e       	mul	r11, r26
 214:	90 0d       	add	r25, r0
 216:	11 24       	eor	r1, r1
 218:	b9 2e       	mov	r11, r25
 21a:	13 c0       	rjmp	.+38     	; 0x242 <vfprintf+0x112>
 21c:	ea e0       	ldi	r30, 0x0A	; 10
 21e:	0e 9f       	mul	r16, r30
 220:	90 0d       	add	r25, r0
 222:	11 24       	eor	r1, r1
 224:	09 2f       	mov	r16, r25
 226:	10 62       	ori	r17, 0x20	; 32
 228:	0c c0       	rjmp	.+24     	; 0x242 <vfprintf+0x112>
 22a:	8e 32       	cpi	r24, 0x2E	; 46
 22c:	21 f4       	brne	.+8      	; 0x236 <vfprintf+0x106>
 22e:	16 fd       	sbrc	r17, 6
 230:	85 c1       	rjmp	.+778    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 232:	10 64       	ori	r17, 0x40	; 64
 234:	06 c0       	rjmp	.+12     	; 0x242 <vfprintf+0x112>
 236:	8c 36       	cpi	r24, 0x6C	; 108
 238:	11 f4       	brne	.+4      	; 0x23e <vfprintf+0x10e>
 23a:	10 68       	ori	r17, 0x80	; 128
 23c:	02 c0       	rjmp	.+4      	; 0x242 <vfprintf+0x112>
 23e:	88 36       	cpi	r24, 0x68	; 104
 240:	51 f4       	brne	.+20     	; 0x256 <vfprintf+0x126>
 242:	f3 01       	movw	r30, r6
 244:	84 91       	lpm	r24, Z
 246:	87 fc       	sbrc	r8, 7
 248:	80 81       	ld	r24, Z
 24a:	ff ef       	ldi	r31, 0xFF	; 255
 24c:	6f 1a       	sub	r6, r31
 24e:	7f 0a       	sbc	r7, r31
 250:	8f 0a       	sbc	r8, r31
 252:	81 11       	cpse	r24, r1
 254:	bf cf       	rjmp	.-130    	; 0x1d4 <vfprintf+0xa4>
 256:	98 2f       	mov	r25, r24
 258:	9f 7d       	andi	r25, 0xDF	; 223
 25a:	95 54       	subi	r25, 0x45	; 69
 25c:	93 30       	cpi	r25, 0x03	; 3
 25e:	28 f4       	brcc	.+10     	; 0x26a <vfprintf+0x13a>
 260:	24 e0       	ldi	r18, 0x04	; 4
 262:	e2 0e       	add	r14, r18
 264:	f1 1c       	adc	r15, r1
 266:	99 82       	std	Y+1, r9	; 0x01
 268:	0f c0       	rjmp	.+30     	; 0x288 <vfprintf+0x158>
 26a:	83 36       	cpi	r24, 0x63	; 99
 26c:	31 f0       	breq	.+12     	; 0x27a <vfprintf+0x14a>
 26e:	83 37       	cpi	r24, 0x73	; 115
 270:	91 f0       	breq	.+36     	; 0x296 <vfprintf+0x166>
 272:	83 35       	cpi	r24, 0x53	; 83
 274:	09 f0       	breq	.+2      	; 0x278 <vfprintf+0x148>
 276:	63 c0       	rjmp	.+198    	; 0x33e <vfprintf+0x20e>
 278:	27 c0       	rjmp	.+78     	; 0x2c8 <vfprintf+0x198>
 27a:	f7 01       	movw	r30, r14
 27c:	80 81       	ld	r24, Z
 27e:	89 83       	std	Y+1, r24	; 0x01
 280:	97 01       	movw	r18, r14
 282:	2e 5f       	subi	r18, 0xFE	; 254
 284:	3f 4f       	sbci	r19, 0xFF	; 255
 286:	79 01       	movw	r14, r18
 288:	28 88       	ldd	r2, Y+16	; 0x10
 28a:	39 88       	ldd	r3, Y+17	; 0x11
 28c:	4a 88       	ldd	r4, Y+18	; 0x12
 28e:	aa 24       	eor	r10, r10
 290:	a3 94       	inc	r10
 292:	b1 2c       	mov	r11, r1
 294:	17 c0       	rjmp	.+46     	; 0x2c4 <vfprintf+0x194>
 296:	a7 01       	movw	r20, r14
 298:	4d 5f       	subi	r20, 0xFD	; 253
 29a:	5f 4f       	sbci	r21, 0xFF	; 255
 29c:	5f 87       	std	Y+15, r21	; 0x0f
 29e:	4e 87       	std	Y+14, r20	; 0x0e
 2a0:	f7 01       	movw	r30, r14
 2a2:	20 80       	ld	r2, Z
 2a4:	31 80       	ldd	r3, Z+1	; 0x01
 2a6:	42 80       	ldd	r4, Z+2	; 0x02
 2a8:	16 ff       	sbrs	r17, 6
 2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <vfprintf+0x182>
 2ac:	4b 2d       	mov	r20, r11
 2ae:	50 e0       	ldi	r21, 0x00	; 0
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <vfprintf+0x186>
 2b2:	4f ef       	ldi	r20, 0xFF	; 255
 2b4:	5f ef       	ldi	r21, 0xFF	; 255
 2b6:	84 2d       	mov	r24, r4
 2b8:	b1 01       	movw	r22, r2
 2ba:	0e 94 51 09 	call	0x12a2	; 0x12a2 <strnlen>
 2be:	5c 01       	movw	r10, r24
 2c0:	ee 84       	ldd	r14, Y+14	; 0x0e
 2c2:	ff 84       	ldd	r15, Y+15	; 0x0f
 2c4:	1f 77       	andi	r17, 0x7F	; 127
 2c6:	18 c0       	rjmp	.+48     	; 0x2f8 <vfprintf+0x1c8>
 2c8:	97 01       	movw	r18, r14
 2ca:	2d 5f       	subi	r18, 0xFD	; 253
 2cc:	3f 4f       	sbci	r19, 0xFF	; 255
 2ce:	3f 87       	std	Y+15, r19	; 0x0f
 2d0:	2e 87       	std	Y+14, r18	; 0x0e
 2d2:	f7 01       	movw	r30, r14
 2d4:	20 80       	ld	r2, Z
 2d6:	31 80       	ldd	r3, Z+1	; 0x01
 2d8:	42 80       	ldd	r4, Z+2	; 0x02
 2da:	16 ff       	sbrs	r17, 6
 2dc:	03 c0       	rjmp	.+6      	; 0x2e4 <vfprintf+0x1b4>
 2de:	4b 2d       	mov	r20, r11
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <vfprintf+0x1b8>
 2e4:	4f ef       	ldi	r20, 0xFF	; 255
 2e6:	5f ef       	ldi	r21, 0xFF	; 255
 2e8:	84 2d       	mov	r24, r4
 2ea:	b1 01       	movw	r22, r2
 2ec:	0e 94 51 09 	call	0x12a2	; 0x12a2 <strnlen>
 2f0:	5c 01       	movw	r10, r24
 2f2:	10 68       	ori	r17, 0x80	; 128
 2f4:	ee 84       	ldd	r14, Y+14	; 0x0e
 2f6:	ff 84       	ldd	r15, Y+15	; 0x0f
 2f8:	13 fd       	sbrc	r17, 3
 2fa:	1d c0       	rjmp	.+58     	; 0x336 <vfprintf+0x206>
 2fc:	80 2f       	mov	r24, r16
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	a8 16       	cp	r10, r24
 302:	b9 06       	cpc	r11, r25
 304:	c0 f4       	brcc	.+48     	; 0x336 <vfprintf+0x206>
 306:	b6 01       	movw	r22, r12
 308:	80 e2       	ldi	r24, 0x20	; 32
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 310:	01 50       	subi	r16, 0x01	; 1
 312:	f4 cf       	rjmp	.-24     	; 0x2fc <vfprintf+0x1cc>
 314:	f1 01       	movw	r30, r2
 316:	84 91       	lpm	r24, Z
 318:	47 fc       	sbrc	r4, 7
 31a:	80 81       	ld	r24, Z
 31c:	ff ef       	ldi	r31, 0xFF	; 255
 31e:	2f 1a       	sub	r2, r31
 320:	3f 0a       	sbc	r3, r31
 322:	4f 0a       	sbc	r4, r31
 324:	b6 01       	movw	r22, r12
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 32c:	01 11       	cpse	r16, r1
 32e:	01 50       	subi	r16, 0x01	; 1
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	a2 1a       	sub	r10, r18
 334:	b1 08       	sbc	r11, r1
 336:	a1 14       	cp	r10, r1
 338:	b1 04       	cpc	r11, r1
 33a:	61 f7       	brne	.-40     	; 0x314 <vfprintf+0x1e4>
 33c:	f5 c0       	rjmp	.+490    	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 33e:	84 36       	cpi	r24, 0x64	; 100
 340:	11 f0       	breq	.+4      	; 0x346 <vfprintf+0x216>
 342:	89 36       	cpi	r24, 0x69	; 105
 344:	71 f5       	brne	.+92     	; 0x3a2 <vfprintf+0x272>
 346:	f7 01       	movw	r30, r14
 348:	17 ff       	sbrs	r17, 7
 34a:	08 c0       	rjmp	.+16     	; 0x35c <vfprintf+0x22c>
 34c:	60 81       	ld	r22, Z
 34e:	71 81       	ldd	r23, Z+1	; 0x01
 350:	82 81       	ldd	r24, Z+2	; 0x02
 352:	93 81       	ldd	r25, Z+3	; 0x03
 354:	97 01       	movw	r18, r14
 356:	2c 5f       	subi	r18, 0xFC	; 252
 358:	3f 4f       	sbci	r19, 0xFF	; 255
 35a:	09 c0       	rjmp	.+18     	; 0x36e <vfprintf+0x23e>
 35c:	60 81       	ld	r22, Z
 35e:	71 81       	ldd	r23, Z+1	; 0x01
 360:	07 2e       	mov	r0, r23
 362:	00 0c       	add	r0, r0
 364:	88 0b       	sbc	r24, r24
 366:	99 0b       	sbc	r25, r25
 368:	97 01       	movw	r18, r14
 36a:	2e 5f       	subi	r18, 0xFE	; 254
 36c:	3f 4f       	sbci	r19, 0xFF	; 255
 36e:	79 01       	movw	r14, r18
 370:	1f 76       	andi	r17, 0x6F	; 111
 372:	31 2e       	mov	r3, r17
 374:	97 ff       	sbrs	r25, 7
 376:	0a c0       	rjmp	.+20     	; 0x38c <vfprintf+0x25c>
 378:	90 95       	com	r25
 37a:	80 95       	com	r24
 37c:	70 95       	com	r23
 37e:	61 95       	neg	r22
 380:	7f 4f       	sbci	r23, 0xFF	; 255
 382:	8f 4f       	sbci	r24, 0xFF	; 255
 384:	9f 4f       	sbci	r25, 0xFF	; 255
 386:	31 2f       	mov	r19, r17
 388:	30 68       	ori	r19, 0x80	; 128
 38a:	33 2e       	mov	r3, r19
 38c:	2a e0       	ldi	r18, 0x0A	; 10
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	ae 01       	movw	r20, r28
 392:	4f 5f       	subi	r20, 0xFF	; 255
 394:	5f 4f       	sbci	r21, 0xFF	; 255
 396:	0e 94 25 06 	call	0xc4a	; 0xc4a <__ultoa_invert>
 39a:	48 2e       	mov	r4, r24
 39c:	4c 85       	ldd	r20, Y+12	; 0x0c
 39e:	44 1a       	sub	r4, r20
 3a0:	4a c0       	rjmp	.+148    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3a2:	85 37       	cpi	r24, 0x75	; 117
 3a4:	29 f4       	brne	.+10     	; 0x3b0 <vfprintf+0x280>
 3a6:	1f 7e       	andi	r17, 0xEF	; 239
 3a8:	a1 2e       	mov	r10, r17
 3aa:	2a e0       	ldi	r18, 0x0A	; 10
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	25 c0       	rjmp	.+74     	; 0x3fa <vfprintf+0x2ca>
 3b0:	51 2f       	mov	r21, r17
 3b2:	59 7f       	andi	r21, 0xF9	; 249
 3b4:	a5 2e       	mov	r10, r21
 3b6:	8f 36       	cpi	r24, 0x6F	; 111
 3b8:	c1 f0       	breq	.+48     	; 0x3ea <vfprintf+0x2ba>
 3ba:	18 f4       	brcc	.+6      	; 0x3c2 <vfprintf+0x292>
 3bc:	88 35       	cpi	r24, 0x58	; 88
 3be:	79 f0       	breq	.+30     	; 0x3de <vfprintf+0x2ae>
 3c0:	bd c0       	rjmp	.+378    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 3c2:	80 37       	cpi	r24, 0x70	; 112
 3c4:	19 f0       	breq	.+6      	; 0x3cc <vfprintf+0x29c>
 3c6:	88 37       	cpi	r24, 0x78	; 120
 3c8:	21 f0       	breq	.+8      	; 0x3d2 <vfprintf+0x2a2>
 3ca:	b8 c0       	rjmp	.+368    	; 0x53c <__EEPROM_REGION_LENGTH__+0x13c>
 3cc:	85 2f       	mov	r24, r21
 3ce:	80 61       	ori	r24, 0x10	; 16
 3d0:	a8 2e       	mov	r10, r24
 3d2:	a4 fe       	sbrs	r10, 4
 3d4:	0d c0       	rjmp	.+26     	; 0x3f0 <vfprintf+0x2c0>
 3d6:	9a 2d       	mov	r25, r10
 3d8:	94 60       	ori	r25, 0x04	; 4
 3da:	a9 2e       	mov	r10, r25
 3dc:	09 c0       	rjmp	.+18     	; 0x3f0 <vfprintf+0x2c0>
 3de:	14 ff       	sbrs	r17, 4
 3e0:	0a c0       	rjmp	.+20     	; 0x3f6 <vfprintf+0x2c6>
 3e2:	a5 2f       	mov	r26, r21
 3e4:	a6 60       	ori	r26, 0x06	; 6
 3e6:	aa 2e       	mov	r10, r26
 3e8:	06 c0       	rjmp	.+12     	; 0x3f6 <vfprintf+0x2c6>
 3ea:	28 e0       	ldi	r18, 0x08	; 8
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <vfprintf+0x2ca>
 3f0:	20 e1       	ldi	r18, 0x10	; 16
 3f2:	30 e0       	ldi	r19, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <vfprintf+0x2ca>
 3f6:	20 e1       	ldi	r18, 0x10	; 16
 3f8:	32 e0       	ldi	r19, 0x02	; 2
 3fa:	f7 01       	movw	r30, r14
 3fc:	a7 fe       	sbrs	r10, 7
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 400:	60 81       	ld	r22, Z
 402:	71 81       	ldd	r23, Z+1	; 0x01
 404:	82 81       	ldd	r24, Z+2	; 0x02
 406:	93 81       	ldd	r25, Z+3	; 0x03
 408:	a7 01       	movw	r20, r14
 40a:	4c 5f       	subi	r20, 0xFC	; 252
 40c:	5f 4f       	sbci	r21, 0xFF	; 255
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 410:	60 81       	ld	r22, Z
 412:	71 81       	ldd	r23, Z+1	; 0x01
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	a7 01       	movw	r20, r14
 41a:	4e 5f       	subi	r20, 0xFE	; 254
 41c:	5f 4f       	sbci	r21, 0xFF	; 255
 41e:	7a 01       	movw	r14, r20
 420:	ae 01       	movw	r20, r28
 422:	4f 5f       	subi	r20, 0xFF	; 255
 424:	5f 4f       	sbci	r21, 0xFF	; 255
 426:	0e 94 25 06 	call	0xc4a	; 0xc4a <__ultoa_invert>
 42a:	48 2e       	mov	r4, r24
 42c:	5c 85       	ldd	r21, Y+12	; 0x0c
 42e:	45 1a       	sub	r4, r21
 430:	8a 2d       	mov	r24, r10
 432:	8f 77       	andi	r24, 0x7F	; 127
 434:	38 2e       	mov	r3, r24
 436:	36 fe       	sbrs	r3, 6
 438:	0d c0       	rjmp	.+26     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 43a:	93 2d       	mov	r25, r3
 43c:	9e 7f       	andi	r25, 0xFE	; 254
 43e:	a9 2e       	mov	r10, r25
 440:	4b 14       	cp	r4, r11
 442:	58 f4       	brcc	.+22     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 444:	34 fe       	sbrs	r3, 4
 446:	0b c0       	rjmp	.+22     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 448:	32 fc       	sbrc	r3, 2
 44a:	09 c0       	rjmp	.+18     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 44c:	a3 2d       	mov	r26, r3
 44e:	ae 7e       	andi	r26, 0xEE	; 238
 450:	aa 2e       	mov	r10, r26
 452:	05 c0       	rjmp	.+10     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 454:	14 2d       	mov	r17, r4
 456:	a3 2c       	mov	r10, r3
 458:	03 c0       	rjmp	.+6      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45a:	14 2d       	mov	r17, r4
 45c:	01 c0       	rjmp	.+2      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 45e:	1b 2d       	mov	r17, r11
 460:	a4 fe       	sbrs	r10, 4
 462:	0e c0       	rjmp	.+28     	; 0x480 <__EEPROM_REGION_LENGTH__+0x80>
 464:	fe 01       	movw	r30, r28
 466:	e4 0d       	add	r30, r4
 468:	f1 1d       	adc	r31, r1
 46a:	80 81       	ld	r24, Z
 46c:	80 33       	cpi	r24, 0x30	; 48
 46e:	21 f4       	brne	.+8      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 470:	ea 2d       	mov	r30, r10
 472:	e9 7e       	andi	r30, 0xE9	; 233
 474:	ae 2e       	mov	r10, r30
 476:	08 c0       	rjmp	.+16     	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 478:	a2 fe       	sbrs	r10, 2
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 47c:	1e 5f       	subi	r17, 0xFE	; 254
 47e:	04 c0       	rjmp	.+8      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 480:	8a 2d       	mov	r24, r10
 482:	86 78       	andi	r24, 0x86	; 134
 484:	09 f0       	breq	.+2      	; 0x488 <__EEPROM_REGION_LENGTH__+0x88>
 486:	1f 5f       	subi	r17, 0xFF	; 255
 488:	a3 fc       	sbrc	r10, 3
 48a:	11 c0       	rjmp	.+34     	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 48c:	a0 fe       	sbrs	r10, 0
 48e:	06 c0       	rjmp	.+12     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 490:	10 17       	cp	r17, r16
 492:	88 f4       	brcc	.+34     	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 494:	04 0d       	add	r16, r4
 496:	b0 2e       	mov	r11, r16
 498:	b1 1a       	sub	r11, r17
 49a:	0e c0       	rjmp	.+28     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 49c:	10 17       	cp	r17, r16
 49e:	60 f4       	brcc	.+24     	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4a0:	b6 01       	movw	r22, r12
 4a2:	80 e2       	ldi	r24, 0x20	; 32
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 4aa:	1f 5f       	subi	r17, 0xFF	; 255
 4ac:	f7 cf       	rjmp	.-18     	; 0x49c <__EEPROM_REGION_LENGTH__+0x9c>
 4ae:	10 17       	cp	r17, r16
 4b0:	18 f4       	brcc	.+6      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4b2:	01 1b       	sub	r16, r17
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b6:	b4 2c       	mov	r11, r4
 4b8:	00 e0       	ldi	r16, 0x00	; 0
 4ba:	a4 fe       	sbrs	r10, 4
 4bc:	10 c0       	rjmp	.+32     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4be:	b6 01       	movw	r22, r12
 4c0:	80 e3       	ldi	r24, 0x30	; 48
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 4c8:	a2 fe       	sbrs	r10, 2
 4ca:	17 c0       	rjmp	.+46     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4cc:	a1 fc       	sbrc	r10, 1
 4ce:	03 c0       	rjmp	.+6      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d0:	88 e7       	ldi	r24, 0x78	; 120
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
 4d6:	88 e5       	ldi	r24, 0x58	; 88
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	b6 01       	movw	r22, r12
 4dc:	0c c0       	rjmp	.+24     	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4de:	8a 2d       	mov	r24, r10
 4e0:	86 78       	andi	r24, 0x86	; 134
 4e2:	59 f0       	breq	.+22     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 4e4:	a1 fe       	sbrs	r10, 1
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__EEPROM_REGION_LENGTH__+0xec>
 4e8:	8b e2       	ldi	r24, 0x2B	; 43
 4ea:	01 c0       	rjmp	.+2      	; 0x4ee <__EEPROM_REGION_LENGTH__+0xee>
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	a7 fc       	sbrc	r10, 7
 4f0:	8d e2       	ldi	r24, 0x2D	; 45
 4f2:	b6 01       	movw	r22, r12
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 4fa:	4b 14       	cp	r4, r11
 4fc:	38 f4       	brcc	.+14     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 4fe:	b6 01       	movw	r22, r12
 500:	80 e3       	ldi	r24, 0x30	; 48
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 508:	ba 94       	dec	r11
 50a:	f7 cf       	rjmp	.-18     	; 0x4fa <__EEPROM_REGION_LENGTH__+0xfa>
 50c:	4a 94       	dec	r4
 50e:	e1 e0       	ldi	r30, 0x01	; 1
 510:	f0 e0       	ldi	r31, 0x00	; 0
 512:	ec 0f       	add	r30, r28
 514:	fd 1f       	adc	r31, r29
 516:	e4 0d       	add	r30, r4
 518:	f1 1d       	adc	r31, r1
 51a:	80 81       	ld	r24, Z
 51c:	b6 01       	movw	r22, r12
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 524:	41 10       	cpse	r4, r1
 526:	f2 cf       	rjmp	.-28     	; 0x50c <__EEPROM_REGION_LENGTH__+0x10c>
 528:	00 23       	and	r16, r16
 52a:	09 f4       	brne	.+2      	; 0x52e <__EEPROM_REGION_LENGTH__+0x12e>
 52c:	30 ce       	rjmp	.-928    	; 0x18e <vfprintf+0x5e>
 52e:	b6 01       	movw	r22, r12
 530:	80 e2       	ldi	r24, 0x20	; 32
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 70 07 	call	0xee0	; 0xee0 <fputc>
 538:	01 50       	subi	r16, 0x01	; 1
 53a:	f6 cf       	rjmp	.-20     	; 0x528 <__EEPROM_REGION_LENGTH__+0x128>
 53c:	f6 01       	movw	r30, r12
 53e:	87 81       	ldd	r24, Z+7	; 0x07
 540:	90 85       	ldd	r25, Z+8	; 0x08
 542:	02 c0       	rjmp	.+4      	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
 544:	8f ef       	ldi	r24, 0xFF	; 255
 546:	9f ef       	ldi	r25, 0xFF	; 255
 548:	62 96       	adiw	r28, 0x12	; 18
 54a:	0f b6       	in	r0, 0x3f	; 63
 54c:	f8 94       	cli
 54e:	de bf       	out	0x3e, r29	; 62
 550:	0f be       	out	0x3f, r0	; 63
 552:	cd bf       	out	0x3d, r28	; 61
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	1f 91       	pop	r17
 55a:	0f 91       	pop	r16
 55c:	ff 90       	pop	r15
 55e:	ef 90       	pop	r14
 560:	df 90       	pop	r13
 562:	cf 90       	pop	r12
 564:	bf 90       	pop	r11
 566:	af 90       	pop	r10
 568:	9f 90       	pop	r9
 56a:	8f 90       	pop	r8
 56c:	7f 90       	pop	r7
 56e:	6f 90       	pop	r6
 570:	4f 90       	pop	r4
 572:	3f 90       	pop	r3
 574:	2f 90       	pop	r2
 576:	08 95       	ret

Disassembly of section .text.avrlibc:

000012a2 <strnlen>:
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	6b 01       	movw	r12, r22
    12aa:	e8 2e       	mov	r14, r24
    12ac:	a8 2f       	mov	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	41 15       	cp	r20, r1
    12b2:	51 05       	cpc	r21, r1
    12b4:	31 f4       	brne	.+12     	; 0x12c2 <strnlen+0x20>
    12b6:	8c 19       	sub	r24, r12
    12b8:	9d 09       	sbc	r25, r13
    12ba:	ef 90       	pop	r14
    12bc:	df 90       	pop	r13
    12be:	cf 90       	pop	r12
    12c0:	08 95       	ret
    12c2:	fc 01       	movw	r30, r24
    12c4:	24 91       	lpm	r18, Z
    12c6:	a7 fd       	sbrc	r26, 7
    12c8:	20 81       	ld	r18, Z
    12ca:	22 23       	and	r18, r18
    12cc:	a1 f3       	breq	.-24     	; 0x12b6 <strnlen+0x14>
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	a1 1d       	adc	r26, r1
    12d2:	41 50       	subi	r20, 0x01	; 1
    12d4:	51 09       	sbc	r21, r1
    12d6:	ec cf       	rjmp	.-40     	; 0x12b0 <strnlen+0xe>

Disassembly of section .text.avrlibc:

00000ee0 <fputc>:
 ee0:	0f 93       	push	r16
 ee2:	1f 93       	push	r17
 ee4:	cf 93       	push	r28
 ee6:	df 93       	push	r29
 ee8:	fb 01       	movw	r30, r22
 eea:	24 81       	ldd	r18, Z+4	; 0x04
 eec:	21 fd       	sbrc	r18, 1
 eee:	03 c0       	rjmp	.+6      	; 0xef6 <fputc+0x16>
 ef0:	8f ef       	ldi	r24, 0xFF	; 255
 ef2:	9f ef       	ldi	r25, 0xFF	; 255
 ef4:	2c c0       	rjmp	.+88     	; 0xf4e <fputc+0x6e>
 ef6:	22 ff       	sbrs	r18, 2
 ef8:	16 c0       	rjmp	.+44     	; 0xf26 <fputc+0x46>
 efa:	47 81       	ldd	r20, Z+7	; 0x07
 efc:	50 85       	ldd	r21, Z+8	; 0x08
 efe:	25 81       	ldd	r18, Z+5	; 0x05
 f00:	36 81       	ldd	r19, Z+6	; 0x06
 f02:	42 17       	cp	r20, r18
 f04:	53 07       	cpc	r21, r19
 f06:	44 f4       	brge	.+16     	; 0xf18 <fputc+0x38>
 f08:	a0 81       	ld	r26, Z
 f0a:	b1 81       	ldd	r27, Z+1	; 0x01
 f0c:	9d 01       	movw	r18, r26
 f0e:	2f 5f       	subi	r18, 0xFF	; 255
 f10:	3f 4f       	sbci	r19, 0xFF	; 255
 f12:	31 83       	std	Z+1, r19	; 0x01
 f14:	20 83       	st	Z, r18
 f16:	8c 93       	st	X, r24
 f18:	27 81       	ldd	r18, Z+7	; 0x07
 f1a:	30 85       	ldd	r19, Z+8	; 0x08
 f1c:	2f 5f       	subi	r18, 0xFF	; 255
 f1e:	3f 4f       	sbci	r19, 0xFF	; 255
 f20:	30 87       	std	Z+8, r19	; 0x08
 f22:	27 83       	std	Z+7, r18	; 0x07
 f24:	14 c0       	rjmp	.+40     	; 0xf4e <fputc+0x6e>
 f26:	8b 01       	movw	r16, r22
 f28:	ec 01       	movw	r28, r24
 f2a:	fb 01       	movw	r30, r22
 f2c:	01 84       	ldd	r0, Z+9	; 0x09
 f2e:	f2 85       	ldd	r31, Z+10	; 0x0a
 f30:	e0 2d       	mov	r30, r0
 f32:	09 95       	icall
 f34:	89 2b       	or	r24, r25
 f36:	e1 f6       	brne	.-72     	; 0xef0 <fputc+0x10>
 f38:	d8 01       	movw	r26, r16
 f3a:	17 96       	adiw	r26, 0x07	; 7
 f3c:	8d 91       	ld	r24, X+
 f3e:	9c 91       	ld	r25, X
 f40:	18 97       	sbiw	r26, 0x08	; 8
 f42:	01 96       	adiw	r24, 0x01	; 1
 f44:	18 96       	adiw	r26, 0x08	; 8
 f46:	9c 93       	st	X, r25
 f48:	8e 93       	st	-X, r24
 f4a:	17 97       	sbiw	r26, 0x07	; 7
 f4c:	ce 01       	movw	r24, r28
 f4e:	df 91       	pop	r29
 f50:	cf 91       	pop	r28
 f52:	1f 91       	pop	r17
 f54:	0f 91       	pop	r16
 f56:	08 95       	ret

Disassembly of section .text.avrlibc:

00000c4a <__ultoa_invert>:
 c4a:	fa 01       	movw	r30, r20
 c4c:	aa 27       	eor	r26, r26
 c4e:	28 30       	cpi	r18, 0x08	; 8
 c50:	51 f1       	breq	.+84     	; 0xca6 <__ultoa_invert+0x5c>
 c52:	20 31       	cpi	r18, 0x10	; 16
 c54:	81 f1       	breq	.+96     	; 0xcb6 <__ultoa_invert+0x6c>
 c56:	e8 94       	clt
 c58:	6f 93       	push	r22
 c5a:	6e 7f       	andi	r22, 0xFE	; 254
 c5c:	6e 5f       	subi	r22, 0xFE	; 254
 c5e:	7f 4f       	sbci	r23, 0xFF	; 255
 c60:	8f 4f       	sbci	r24, 0xFF	; 255
 c62:	9f 4f       	sbci	r25, 0xFF	; 255
 c64:	af 4f       	sbci	r26, 0xFF	; 255
 c66:	b1 e0       	ldi	r27, 0x01	; 1
 c68:	3e d0       	rcall	.+124    	; 0xce6 <__ultoa_invert+0x9c>
 c6a:	b4 e0       	ldi	r27, 0x04	; 4
 c6c:	3c d0       	rcall	.+120    	; 0xce6 <__ultoa_invert+0x9c>
 c6e:	67 0f       	add	r22, r23
 c70:	78 1f       	adc	r23, r24
 c72:	89 1f       	adc	r24, r25
 c74:	9a 1f       	adc	r25, r26
 c76:	a1 1d       	adc	r26, r1
 c78:	68 0f       	add	r22, r24
 c7a:	79 1f       	adc	r23, r25
 c7c:	8a 1f       	adc	r24, r26
 c7e:	91 1d       	adc	r25, r1
 c80:	a1 1d       	adc	r26, r1
 c82:	6a 0f       	add	r22, r26
 c84:	71 1d       	adc	r23, r1
 c86:	81 1d       	adc	r24, r1
 c88:	91 1d       	adc	r25, r1
 c8a:	a1 1d       	adc	r26, r1
 c8c:	20 d0       	rcall	.+64     	; 0xcce <__ultoa_invert+0x84>
 c8e:	09 f4       	brne	.+2      	; 0xc92 <__ultoa_invert+0x48>
 c90:	68 94       	set
 c92:	3f 91       	pop	r19
 c94:	2a e0       	ldi	r18, 0x0A	; 10
 c96:	26 9f       	mul	r18, r22
 c98:	11 24       	eor	r1, r1
 c9a:	30 19       	sub	r19, r0
 c9c:	30 5d       	subi	r19, 0xD0	; 208
 c9e:	31 93       	st	Z+, r19
 ca0:	de f6       	brtc	.-74     	; 0xc58 <__ultoa_invert+0xe>
 ca2:	cf 01       	movw	r24, r30
 ca4:	08 95       	ret
 ca6:	46 2f       	mov	r20, r22
 ca8:	47 70       	andi	r20, 0x07	; 7
 caa:	40 5d       	subi	r20, 0xD0	; 208
 cac:	41 93       	st	Z+, r20
 cae:	b3 e0       	ldi	r27, 0x03	; 3
 cb0:	0f d0       	rcall	.+30     	; 0xcd0 <__ultoa_invert+0x86>
 cb2:	c9 f7       	brne	.-14     	; 0xca6 <__ultoa_invert+0x5c>
 cb4:	f6 cf       	rjmp	.-20     	; 0xca2 <__ultoa_invert+0x58>
 cb6:	46 2f       	mov	r20, r22
 cb8:	4f 70       	andi	r20, 0x0F	; 15
 cba:	40 5d       	subi	r20, 0xD0	; 208
 cbc:	4a 33       	cpi	r20, 0x3A	; 58
 cbe:	18 f0       	brcs	.+6      	; 0xcc6 <__ultoa_invert+0x7c>
 cc0:	49 5d       	subi	r20, 0xD9	; 217
 cc2:	31 fd       	sbrc	r19, 1
 cc4:	40 52       	subi	r20, 0x20	; 32
 cc6:	41 93       	st	Z+, r20
 cc8:	02 d0       	rcall	.+4      	; 0xcce <__ultoa_invert+0x84>
 cca:	a9 f7       	brne	.-22     	; 0xcb6 <__ultoa_invert+0x6c>
 ccc:	ea cf       	rjmp	.-44     	; 0xca2 <__ultoa_invert+0x58>
 cce:	b4 e0       	ldi	r27, 0x04	; 4
 cd0:	a6 95       	lsr	r26
 cd2:	97 95       	ror	r25
 cd4:	87 95       	ror	r24
 cd6:	77 95       	ror	r23
 cd8:	67 95       	ror	r22
 cda:	ba 95       	dec	r27
 cdc:	c9 f7       	brne	.-14     	; 0xcd0 <__ultoa_invert+0x86>
 cde:	00 97       	sbiw	r24, 0x00	; 0
 ce0:	61 05       	cpc	r22, r1
 ce2:	71 05       	cpc	r23, r1
 ce4:	08 95       	ret
 ce6:	9b 01       	movw	r18, r22
 ce8:	ac 01       	movw	r20, r24
 cea:	0a 2e       	mov	r0, r26
 cec:	06 94       	lsr	r0
 cee:	57 95       	ror	r21
 cf0:	47 95       	ror	r20
 cf2:	37 95       	ror	r19
 cf4:	27 95       	ror	r18
 cf6:	ba 95       	dec	r27
 cf8:	c9 f7       	brne	.-14     	; 0xcec <__ultoa_invert+0xa2>
 cfa:	62 0f       	add	r22, r18
 cfc:	73 1f       	adc	r23, r19
 cfe:	84 1f       	adc	r24, r20
 d00:	95 1f       	adc	r25, r21
 d02:	a0 1d       	adc	r26, r0
 d04:	08 95       	ret

Disassembly of section .text.libgcc.prologue:

00001234 <__prologue_saves__>:
    1234:	2f 92       	push	r2
    1236:	3f 92       	push	r3
    1238:	4f 92       	push	r4
    123a:	5f 92       	push	r5
    123c:	6f 92       	push	r6
    123e:	7f 92       	push	r7
    1240:	8f 92       	push	r8
    1242:	9f 92       	push	r9
    1244:	af 92       	push	r10
    1246:	bf 92       	push	r11
    1248:	cf 92       	push	r12
    124a:	df 92       	push	r13
    124c:	ef 92       	push	r14
    124e:	ff 92       	push	r15
    1250:	0f 93       	push	r16
    1252:	1f 93       	push	r17
    1254:	cf 93       	push	r28
    1256:	df 93       	push	r29
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	ca 1b       	sub	r28, r26
    125e:	db 0b       	sbc	r29, r27
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

000012d8 <__epilogue_restores__>:
    12d8:	2a 88       	ldd	r2, Y+18	; 0x12
    12da:	39 88       	ldd	r3, Y+17	; 0x11
    12dc:	48 88       	ldd	r4, Y+16	; 0x10
    12de:	5f 84       	ldd	r5, Y+15	; 0x0f
    12e0:	6e 84       	ldd	r6, Y+14	; 0x0e
    12e2:	7d 84       	ldd	r7, Y+13	; 0x0d
    12e4:	8c 84       	ldd	r8, Y+12	; 0x0c
    12e6:	9b 84       	ldd	r9, Y+11	; 0x0b
    12e8:	aa 84       	ldd	r10, Y+10	; 0x0a
    12ea:	b9 84       	ldd	r11, Y+9	; 0x09
    12ec:	c8 84       	ldd	r12, Y+8	; 0x08
    12ee:	df 80       	ldd	r13, Y+7	; 0x07
    12f0:	ee 80       	ldd	r14, Y+6	; 0x06
    12f2:	fd 80       	ldd	r15, Y+5	; 0x05
    12f4:	0c 81       	ldd	r16, Y+4	; 0x04
    12f6:	1b 81       	ldd	r17, Y+3	; 0x03
    12f8:	aa 81       	ldd	r26, Y+2	; 0x02
    12fa:	b9 81       	ldd	r27, Y+1	; 0x01
    12fc:	ce 0f       	add	r28, r30
    12fe:	d1 1d       	adc	r29, r1
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	ed 01       	movw	r28, r26
    130c:	08 95       	ret
